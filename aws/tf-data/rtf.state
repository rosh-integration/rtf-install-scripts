{
  "version": 4,
  "terraform_version": "0.12.23",
  "serial": 40,
  "lineage": "dd8c5dcb-8bcc-1b2b-1374-f9916f8b3dff",
  "outputs": {
    "controller_elastic_ips": {
      "value": "",
      "type": "string"
    },
    "controller_private_ips": {
      "value": "192.168.61.116",
      "type": "string"
    },
    "controller_public_ips": {
      "value": "52.62.86.50",
      "type": "string"
    },
    "inbound_traffic_controller_private_ips": {
      "value": "",
      "type": "string"
    },
    "inbound_traffic_controller_public_ips": {
      "value": "",
      "type": "string"
    },
    "loadbalancer_dns_name": {
      "value": "",
      "type": "string"
    },
    "worker_private_ips": {
      "value": "192.168.92.178 192.168.105.170",
      "type": "string"
    },
    "worker_public_ips": {
      "value": "52.62.175.26 54.252.218.91",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "data",
      "type": "aws_ami",
      "name": "nodes",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "architecture": "x86_64",
            "block_device_mappings": [
              {
                "device_name": "/dev/sda1",
                "ebs": {
                  "delete_on_termination": "true",
                  "encrypted": "false",
                  "iops": "0",
                  "snapshot_id": "snap-03d6fee56e277f1be",
                  "volume_size": "10",
                  "volume_type": "gp2"
                },
                "no_device": "",
                "virtual_name": ""
              }
            ],
            "creation_date": "2019-07-24T08:59:25.000Z",
            "description": "Provided by Red Hat, Inc.",
            "executable_users": null,
            "filter": [
              {
                "name": "name",
                "values": [
                  "RHEL-7.7_HVM_GA-20190723-x86_64-1-Hourly2-GP2"
                ]
              }
            ],
            "hypervisor": "xen",
            "id": "ami-0f1ef883e90ca71c0",
            "image_id": "ami-0f1ef883e90ca71c0",
            "image_location": "309956199498/RHEL-7.7_HVM_GA-20190723-x86_64-1-Hourly2-GP2",
            "image_owner_alias": null,
            "image_type": "machine",
            "kernel_id": null,
            "most_recent": true,
            "name": "RHEL-7.7_HVM_GA-20190723-x86_64-1-Hourly2-GP2",
            "name_regex": null,
            "owner_id": "309956199498",
            "owners": [
              "309956199498"
            ],
            "platform": null,
            "product_codes": [],
            "public": true,
            "ramdisk_id": null,
            "root_device_name": "/dev/sda1",
            "root_device_type": "ebs",
            "root_snapshot_id": "snap-03d6fee56e277f1be",
            "sriov_net_support": "simple",
            "state": "available",
            "state_reason": {
              "code": "UNSET",
              "message": "UNSET"
            },
            "tags": {},
            "virtualization_type": "hvm"
          }
        }
      ]
    },
    {
      "mode": "data",
      "type": "aws_availability_zones",
      "name": "available",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "blacklisted_names": null,
            "blacklisted_zone_ids": null,
            "id": "2020-03-09 22:26:38.6036801 +0000 UTC",
            "names": [
              "ap-southeast-2a",
              "ap-southeast-2b",
              "ap-southeast-2c"
            ],
            "state": null,
            "zone_ids": [
              "apse2-az3",
              "apse2-az1",
              "apse2-az2"
            ]
          }
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_cloudinit_config",
      "name": "controller",
      "provider": "provider.template",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "base64_encode": true,
            "gzip": true,
            "id": "3322384626",
            "part": [
              {
                "content": "#!/bin/bash\n\nmkdir -p /opt/anypoint/runtimefabric\ncat \u003e\u003e /opt/anypoint/runtimefabric/env \u003c\u003cEOF\nRTF_NODE_ROLE=controller_node\nRTF_INSTALL_ROLE=joiner\nRTF_ETCD_DEVICE_SIZE=60G\nRTF_DOCKER_DEVICE_SIZE=250G\nRTF_TOKEN=\"sOH0xEcUA1x7tpbZ\"\nRTF_INSTALLER_IP=\"192.168.61.116\"\nRTF_HTTP_PROXY=''\nRTF_NO_PROXY=''\nRTF_MONITORING_PROXY=''\nRTF_SERVICE_UID=''\nRTF_SERVICE_GID=''\nEOF\n",
                "content_type": "text/x-shellscript",
                "filename": "envvars.sh",
                "merge_type": ""
              },
              {
                "content": "#!/bin/bash\nset -eo pipefail\n\n# Constants\nSCRIPT_VERSION='20200117-a53e64e'\nREDIRECT_LOG=/var/log/rtf-init.log\nFSTAB_COMMENT=\"# Added by RTF\"\nBASE_DIR=/opt/anypoint/runtimefabric\nSTATE_DIR=$BASE_DIR/.state\nSKIP_TEXT=\"Skipped. Already executed.\"\nMETADATA_IP=169.254.169.254\nCURL_OPTS=\"-L -k -sS --fail --connect-timeout 10 --retry 5 --retry-delay 15\"\nCURL_METADATA_OPTS=\"${CURL_OPTS} --noproxy ${METADATA_IP}\"\nAWS_METADATA_URL=http://$METADATA_IP/latest/meta-data\nAZURE_METADATA_HEADER=\"Metadata:true\"\nAZURE_METADATA_URL=http://$METADATA_IP/metadata/instance\nAZURE_METADATA_VERSION=2017-08-01\nDOCKER_MOUNT=/var/lib/gravity\nETCD_MOUNT=/var/lib/gravity/planet/etcd\nREGISTRATION_ATTEMPTS=5\nJOINING_ATTEMPTS=10\nGRAVITY_BASH=\"gravity planet enter -- --notty /usr/bin/bash -- -c\"\nSYSTEM_NO_PROXY=\"kubernetes.default.svc,.local,0.0.0.0/0\"\nACTIVATION_PROPERTIES_FILE=activation-properties.json\nKUBECTL_CMD_PREFIX=${KUBECTL_CMD_PREFIX:-\"gravity planet enter -- --notty /usr/bin/kubectl --\"}\nHELM=\"gravity planet enter -- --notty /usr/bin/helm --\"\nCURRENT_STEP=init\nCURRENT_STEP_NBR=0\nSEP=\"Done.\\n\"\nLINE=\"\\n================================================\"\n\n# Defaults\nRTF_SERVICE_UID=${RTF_SERVICE_UID:-1000}\nRTF_SERVICE_GID=${RTF_SERVICE_GID:-1000}\nPOD_NETWORK_CIDR=${POD_NETWORK_CIDR:-10.244.0.0/16}\nSERVICE_CIDR=${SERVICE_CIDR:-10.100.0.0/16}\n\n# ADDITIONAL_ENV_VARS_PLACEHOLDER_DO_NOT_REMOVE\n\n# detect OS\ncase \"$(uname -s)\" in\n    Darwin*)\n      BASE64_DECODE_OPTS=\"-D\"\n      ;;\n    *)\n      BASE64_DECODE_OPTS=\"-d\"\nesac\n\nfunction on_exit {\n  local trap_code=$?\n  if [ $trap_code -ne 0 ] ; then\n    local ANCHOR=$(echo ${CURRENT_STEP} | tr \"_\" \"-\")\n    echo\n    echo \"***********************************************************\"\n    echo \"** Oh no! Your installation has stopped due to an error. **\"\n    echo \"***********************************************************\"\n    echo \"  1. Visit the troubleshooting guide for help:\"\n    echo \"     https://docs.mulesoft.com/runtime-fabric/latest/troubleshoot-guide#${ANCHOR}\"\n    echo\n    echo \"  2. Resume installation by running ${BASE_DIR}/init.sh\"\n    echo\n    echo \"Additional information: Error code: $trap_code; Step: ${CURRENT_STEP}; Line: ${TRAP_LINE:--};\"\n    echo\n\n  fi\n\n  echo -n $SCRIPT_VERSION \u003e $STATE_DIR/version\n}\n\nfunction on_error {\n    TRAP_LINE=$1\n}\n\ntrap 'on_error $LINENO' ERR\ntrap on_exit EXIT\n\nfunction run_step() {\n    CURRENT_STEP=$1\n    local DESCRIPTION=$2\n    (( CURRENT_STEP_NBR++ )) || true\n    echo\n    echo -e \"${CURRENT_STEP_NBR} / ${STEP_COUNT}: ${DESCRIPTION}${LINE}\"\n    if [ -f ${STATE_DIR}/${CURRENT_STEP} ]; then\n        echo ${SKIP_TEXT}\n        return 0\n    fi\n    eval ${CURRENT_STEP}\n    touch ${STATE_DIR}/${CURRENT_STEP}\n    echo -e ${SEP}\n}\n\nfunction simple_json_get () {\n    local prop=$1\n    local json=$2\n    local regex=\"\\\"$prop\\\":\\\"([^\\\"]+)\\\"\"\n\n    if [[ $json =~ $regex ]]; then\n        echo -n ${BASH_REMATCH[1]}\n    else\n        echo \"Error: Failed to extract json property: \\\"$prop\\\" from $json\"\n        exit 1\n    fi\n}\n\nfunction check_root_user() {\n    CURRENT_STEP=$FUNCNAME\n    if [[ $EUID -ne 0 ]]; then\n        echo \"Error: You are not running as root. Runtime Fabric requires elevated privileges to install.\"\n        return 1\n    fi\n}\n\nfunction load_environment {\n    CURRENT_STEP=$FUNCNAME\n    if [ -f $BASE_DIR/env ]; then\n        . $BASE_DIR/env\n    fi\n\n    if [ -z \"$RTF_HTTP_PROXY\" ]; then\n        RTF_HTTP_PROXY=${HTTP_PROXY:-}\n    fi\n\n    if [ -z \"$RTF_NO_PROXY\" ]; then\n        RTF_NO_PROXY=${NO_PROXY:-}\n    fi\n}\n\nfunction decode_activation_data() {\n    CURRENT_STEP=$FUNCNAME\n    if [ \"$RTF_ACTIVATION_DATA\" == \"skip\" ]; then\n        echo \"Skipped $CURRENT_STEP. RTF_ACTIVATION_DATA=skip.\"\n        return 0\n    fi\n    decoded=$(echo -n $RTF_ACTIVATION_DATA | base64 $BASE64_DECODE_OPTS)\n    RTF_ENDPOINT=$(echo $decoded | cut -d':' -f 1)\n    RTF_ACTIVATION_TOKEN=$(echo $decoded | cut -d':' -f 2)\n}\n\nfunction fetch_activation_properties() {\n    CURRENT_STEP=$FUNCNAME\n    if [ -z \"$RTF_ACTIVATION_TOKEN\" ]; then\n        echo \"Skipped $CURRENT_STEP. RTF_ACTIVATION_TOKEN not set.\"\n        return 0\n    fi\n    if [ -f $STATE_DIR/install_rtf_components ]; then\n        echo \"Skipped $CURRENT_STEP. Not installing RTF components.\"\n        return 0\n    fi\n    echo \"Fetching activation properties...\"\n\n    if [ ! -z $RTF_ENDPOINT ] \u0026\u0026 [[ $RTF_ENDPOINT != http* ]]; then\n        RTF_ENDPOINT=\"https://$RTF_ENDPOINT\"\n    fi\n\n    COUNT=0\n    while :\n    do\n        CODE=$($CURL_WITH_PROXY $CURL_OPTS -w \"%{http_code}\" $RTF_ENDPOINT/runtimefabric/api/activationData -H \"Authorization: $RTF_ACTIVATION_TOKEN\" -H \"Accept: application/json\" -o $ACTIVATION_PROPERTIES_FILE || true)\n        if [ \"$CODE\" == \"200\" ]; then\n            break\n        fi\n        let COUNT=COUNT+1\n        if [ $COUNT -ge 8 ]; then\n            echo \"Error: Failed to fetch $COUNT times, giving up.\"\n            exit 1\n        fi\n        echo \"Retrying in $((10 * $COUNT)) seconds...\"\n        sleep $((10 * $COUNT))\n    done\n\n    if [ -z \"$RTF_INSTALL_PACKAGE_URL\" ]; then\n        RTF_INSTALL_PACKAGE_URL=$(simple_json_get RTF_INSTALL_PACKAGE_URL `cat $ACTIVATION_PROPERTIES_FILE`)\n    fi\n\n    if [ ! -z $RTF_INSTALL_PACKAGE_URL ] \u0026\u0026 [[ $RTF_INSTALL_PACKAGE_URL != http* ]]; then\n        RTF_INSTALL_PACKAGE_URL=\"https://$RTF_INSTALL_PACKAGE_URL\"\n    fi\n\n    rm $ACTIVATION_PROPERTIES_FILE\n}\n\nfunction detect_properties() {\n    CURRENT_STEP=$FUNCNAME\n    if [ -z \"$RTF_PRIVATE_IP\" ]; then\n        echo \"RTF_PRIVATE_IP is not set, attempting to detect cloud provider\"\n\n        # Detect cloud provider by hitting instance metadata service. For azure, tags are converted to ENV_VARs\n        HTTP_CODE=$(curl $CURL_METADATA_OPTS -o /dev/null -w \"%{http_code}\" $AWS_METADATA_URL/ || true)\n        if [ $HTTP_CODE == 200 ]; then\n            echo \"Detected cloud provider: AWS\"\n            RTF_PRIVATE_IP=$(curl $CURL_METADATA_OPTS $AWS_METADATA_URL/local-ipv4)\n        else\n            HTTP_CODE=$(curl $CURL_METADATA_OPTS -o /dev/null -w \"%{http_code}\" -H$AZURE_METADATA_HEADER \"$AZURE_METADATA_URL/?api-version=$AZURE_METADATA_VERSION\" || true)\n            if [ $HTTP_CODE == 200 ]; then\n                echo \"Detected cloud provider: Azure\"\n                RTF_PRIVATE_IP=$(curl $CURL_METADATA_OPTS -H$AZURE_METADATA_HEADER \"$AZURE_METADATA_URL/network/interface/0/ipv4/ipAddress/0/privateIpAddress?api-version=$AZURE_METADATA_VERSION\u0026format=text\")\n                TAGS=$(curl $CURL_METADATA_OPTS -H$AZURE_METADATA_HEADER \"$AZURE_METADATA_URL/compute/tags?api-version=$AZURE_METADATA_VERSION\u0026format=text\")\n                IFS=';' read -ra TAG_ARRAY \u003c\u003c\u003c \"$TAGS\"\n                for i in \"${TAG_ARRAY[@]}\"; do\n                    IFS=':' read -ra THIS_TAG \u003c\u003c\u003c \"$i\"\n                    declare -g \"${THIS_TAG[0]}=${THIS_TAG[1]}\"\n                done\n            fi\n        fi\n    fi\n\n    if [ -z $RTF_HTTP_PROXY ]; then\n        CURL_WITH_PROXY=\"curl\"\n    else\n        CURL_WITH_PROXY=\"curl --proxy $RTF_HTTP_PROXY\"\n    fi\n\n    # Update NO_PROXY to make sure we bypass local addresses\n    export NO_PROXY=\"0.0.0.0/0,.local,${NO_PROXY}\"\n\n    return 0\n}\n\nfunction validate_properties() {\n    CURRENT_STEP=$FUNCNAME\n    echo \"Validating properties...\"\n    echo RTF_PRIVATE_IP: $RTF_PRIVATE_IP\n    echo RTF_NODE_ROLE: $RTF_NODE_ROLE\n    echo RTF_INSTALL_ROLE: $RTF_INSTALL_ROLE\n    echo RTF_DOCKER_DEVICE: $RTF_DOCKER_DEVICE\n    echo RTF_ETCD_DEVICE: $RTF_ETCD_DEVICE\n    echo RTF_DOCKER_DEVICE_SIZE: $RTF_DOCKER_DEVICE_SIZE\n    echo RTF_ETCD_DEVICE_SIZE: $RTF_ETCD_DEVICE_SIZE\n    echo RTF_HTTP_PROXY: $RTF_HTTP_PROXY\n    echo RTF_NO_PROXY: $RTF_NO_PROXY\n    echo HTTP_PROXY: $HTTP_PROXY\n    echo HTTPS_PROXY: $HTTPS_PROXY\n    echo NO_PROXY: $NO_PROXY\n    echo RTF_MONITORING_PROXY: $RTF_MONITORING_PROXY\n    echo RTF_SERVICE_UID: $RTF_SERVICE_UID\n    echo RTF_SERVICE_GID: $RTF_SERVICE_GID\n\n    [ -z \"$RTF_INSTALL_ROLE\" ] \u0026\u0026 echo \"Error: RTF_INSTALL_ROLE not set\" \u0026\u0026 exit 1\n    [ -z \"$RTF_NODE_ROLE\" ] \u0026\u0026 echo \"Error: RTF_NODE_ROLE not set\" \u0026\u0026 exit 1\n\n    # Install-leader properties\n    if [ $RTF_INSTALL_ROLE == \"leader\" ]; then\n        echo RTF_INSTALL_PACKAGE_URL: $RTF_INSTALL_PACKAGE_URL\n        echo RTF_TOKEN: $RTF_TOKEN\n        echo RTF_NAME: $RTF_NAME\n        # Registration properties\n        echo RTF_ACTIVATION_TOKEN: $RTF_ACTIVATION_TOKEN\n        echo RTF_MULE_LICENSE: ...$(echo $RTF_MULE_LICENSE | tail -c 10)\n        [ -z \"$RTF_NAME\" ] \u0026\u0026 echo \"Error: RTF_NAME not set\" \u0026\u0026 exit 1\n    else\n        echo RTF_INSTALLER_IP: $RTF_INSTALLER_IP\n        [ -z \"$RTF_INSTALLER_IP\" ] \u0026\u0026 echo \"Error: RTF_INSTALLER_IP\" \u0026\u0026 exit 1\n    fi\n\n    [ -z \"$RTF_PRIVATE_IP\" ] \u0026\u0026 echo \"Error: RTF_PRIVATE_IP not set\" \u0026\u0026 exit 1\n    [ -z \"$RTF_DOCKER_DEVICE\" ] \u0026\u0026 [ -z \"$RTF_DOCKER_DEVICE_SIZE\" ] \u0026\u0026 echo \"Error: RTF_DOCKER_DEVICE or RTF_DOCKER_DEVICE_SIZE must be set\" \u0026\u0026 exit 1\n    [ -z \"$RTF_TOKEN\" ] \u0026\u0026 echo \"Error: RTF_TOKEN not set\" \u0026\u0026 exit 1\n\n    if [ $RTF_NODE_ROLE == \"controller_node\" ] || [ $RTF_NODE_ROLE == \"general_node\" ]; then\n        [ -z \"$RTF_ETCD_DEVICE\" ] \u0026\u0026 [ -z \"$RTF_ETCD_DEVICE_SIZE\" ] \u0026\u0026 echo \"Error: RTF_ETCD_DEVICE or RTF_ETCD_DEVICE_SIZE must be set\" \u0026\u0026 exit 1\n    fi\n    return 0\n}\n\nfunction install_required_packages() {\n    #disable exit-on-error\n    set +e\n    rpm -q chrony\n    if [ $? != 0 ]; then\n        echo \"Installing chrony...\"\n        yum install -y chrony || true\n    fi\n\n    printf \"Checking chrony sync status...\"\n    COUNT=0\n    while :\n    do\n        chronyc tracking | grep -E 'Leap status\\s+:\\s+Normal'\n        if [ \"$?\" == \"0\" ]; then\n            echo \"[OK]\"\n            break\n        fi\n        let COUNT=COUNT+1\n        if [ $COUNT -ge \"3\" ]; then\n            echo \"Error: chrony sync check failed $COUNT times, giving up.\"\n            exit 1\n        fi\n        echo \"Retrying in 30 seconds...\"\n        sleep 30\n    done\n    # enable exit-on-error\n    set -e\n}\n\n\nfunction format_and_mount_disks() {\n\n    # if we specify the size, discover the disk from lsblk\n    if [ -n \"$RTF_DOCKER_DEVICE_SIZE\" ]; then\n        set +e\n        RTF_DOCKER_DEVICE=/dev/$(lsblk --inverse --nodeps --noheadings --output NAME,TYPE,SIZE | grep $RTF_DOCKER_DEVICE_SIZE | cut -d ' ' -f 1 | head -n1)\n        set -e\n        if [ \"$RTF_DOCKER_DEVICE\" == \"/dev/\" ]; then\n            echo \"Error: $RTF_DOCKER_DEVICE_SIZE docker disk not found\"\n            lsblk\n            exit 1\n        fi\n    else\n        # devices could be symlinks, resolve now\n        if [ -f $RTF_DOCKER_DEVICE ]; then\n            RTF_DOCKER_DEVICE=$(readlink -fe \"$RTF_DOCKER_DEVICE\")\n        fi\n        # ensure device is a real block device\n        echo \"Querying block devices for $RTF_DOCKER_DEVICE...\"\n        lsblk $RTF_DOCKER_DEVICE\n    fi\n\n    echo \"Initializing docker filesystem ($RTF_DOCKER_DEVICE)...\"\n    if [ -d \"$DOCKER_MOUNT\" ]; then\n        umount -l $DOCKER_MOUNT || true\n        rm -r $DOCKER_MOUNT\n    fi\n    mkfs.xfs -n ftype=1 -f $RTF_DOCKER_DEVICE\n    # get the UUID\n    RTF_DOCKER_DEVICE_UUID=$(blkid $RTF_DOCKER_DEVICE -ovalue | head -1)\n\n    sed -i.bak '/RTF/d' /etc/fstab\n    echo -e \"UUID=$RTF_DOCKER_DEVICE_UUID\\t$DOCKER_MOUNT\\txfs\\tdefaults,nofail\\t0\\t2\\t$FSTAB_COMMENT\" \u003e\u003e /etc/fstab\n\n    mkdir -p $DOCKER_MOUNT\n    mount $DOCKER_MOUNT\n    chown -R $RTF_SERVICE_UID:$RTF_SERVICE_GID $DOCKER_MOUNT\n\n    if [ \"$RTF_NODE_ROLE\" == \"controller_node\" ] || [ $RTF_NODE_ROLE == \"general_node\" ]; then\n\n        # if we specify the size, discover the disk from lsblk\n        if [ -n \"$RTF_ETCD_DEVICE_SIZE\" ]; then\n            set +e\n            RTF_ETCD_DEVICE=/dev/$(lsblk --inverse --nodeps --noheadings --output NAME,TYPE,SIZE | grep $RTF_ETCD_DEVICE_SIZE | cut -d ' ' -f 1 | head -n1)\n            set -e\n            if [ \"$RTF_ETCD_DEVICE\" == \"/dev/\" ]; then\n                echo \"Error: $RTF_ECTD_DEVICE_SIZE etcd disk not found\"\n                lsblk\n                exit 1\n            fi\n        else\n            # devices could be symlinks, resolve now\n            if [ -f $RTF_ETCD_DEVICE ]; then\n                RTF_ETCD_DEVICE=$(readlink -f \"$RTF_ETCD_DEVICE\")\n            fi\n            echo \"Querying block devices for $RTF_ETCD_DEVICE...\"\n            lsblk $RTF_ETCD_DEVICE\n        fi\n        echo \"Initializing etcd filesystem ($RTF_ETCD_DEVICE)...\"\n        if [ -d \"$ETCD_MOUNT\" ]; then\n            umount -l $ETCD_MOUNT || true\n            rm -r $ETCD_MOUNT\n        fi\n        mkfs.xfs -n ftype=1 -f $RTF_ETCD_DEVICE\n        # get the UUID\n        RTF_ETCD_DEVICE_UUID=$(blkid $RTF_ETCD_DEVICE -ovalue | head -1)\n        echo -e \"UUID=$RTF_ETCD_DEVICE_UUID\\t$ETCD_MOUNT\\txfs\\tdefaults,nofail\\t0\\t2\\t$FSTAB_COMMENT\" \u003e\u003e /etc/fstab\n        mkdir -p $ETCD_MOUNT\n        mount $ETCD_MOUNT\n        chown -R $RTF_SERVICE_UID:$RTF_SERVICE_GID $ETCD_MOUNT\n    fi\n}\n\nfunction configure_ip_tables() {\n    systemctl disable firewalld || true\n    systemctl stop firewalld || true\n\n    # Insert IP tables rules\n    echo -e '*filter\\n:INPUT ACCEPT [0:0]\\n:FORWARD ACCEPT [0:0]\\n:OUTPUT ACCEPT [0:0]\\n-A OUTPUT -o lo -j ACCEPT\\n-A OUTPUT -d 172.31.0.0/16 -p tcp -j ACCEPT\\n-A OUTPUT -d 172.31.0.0/16 -p udp -j ACCEPT\\n-A OUTPUT -d 10.0.0.0/8 -p tcp -j ACCEPT\\n-A OUTPUT -d 10.0.0.0/8 -p udp -j ACCEPT\\n-A OUTPUT -p tcp -m tcp ! --tcp-flags FIN,SYN,RST,ACK SYN -j ACCEPT\\n-A OUTPUT -p udp --dport 123 -j ACCEPT\\n-A INPUT -p udp --sport 123 -j ACCEPT\\nCOMMIT' \u003e /etc/rtf-iptables.rules\n    echo -e '[Unit]\\nDescription=Packet Filtering Framework\\n\\n[Service]\\nType=oneshot\\nExecStart=/usr/sbin/iptables-restore /etc/rtf-iptables.rules\\nExecReload=/usr/sbin/iptables-restore /etc/rtf-iptables.rules\\nRemainAfterExit=yes\\n\\n[Install]\\nWantedBy=multi-user.target' \u003e /etc/systemd/system/iptables.service\n}\n\nfunction configure_kernel_modules() {\n    modprobe br_netfilter || true\n    modprobe ebtable_filter || true\n    modprobe overlay || true\n    modprobe ip_tables || true\n    modprobe iptable_filter || true\n    modprobe iptable_nat || true\n\n    cat \u003e /etc/modules-load.d/telekube.conf \u003c\u003cEOF\nip_tables\niptable_nat\niptable_filter\nbr_netfilter\noverlay\nebtable_filter\nEOF\n\n    cat \u003e /etc/sysctl.d/50-telekube.conf \u003c\u003cEOF\nnet.ipv4.ip_forward=1\nnet.bridge.bridge-nf-call-iptables=1\nEOF\n\n    if sysctl -q fs.may_detach_mounts \u003e/dev/null 2\u003e\u00261; then\n      echo \"fs.may_detach_mounts=1\" \u003e\u003e /etc/sysctl.d/50-telekube.conf\n    fi\n\n    sysctl -p /etc/sysctl.d/50-telekube.conf\n}\n\nfunction start_system_services() {\n    systemctl --system daemon-reload\n    systemctl enable iptables.service\n    systemctl enable chronyd\n    systemctl start iptables.service\n    systemctl start chronyd\n}\n\nfunction fetch_rtfctl() {\n    if [[ -z $RTF_ENDPOINT ]]; then\n        RTFCTL_URL=https://anypoint.mulesoft.com/runtimefabric/api/download/rtfctl/latest\n    else\n        RTFCTL_URL=${RTF_ENDPOINT}/runtimefabric/api/download/rtfctl/latest\n    fi\n\n    echo \"Fetching rtfctl ${RTFCTL_URL}...\"\n    $CURL_WITH_PROXY $CURL_OPTS -o rtfctl $RTFCTL_URL\n    chmod +x ./rtfctl\n}\n\nfunction add_cgroup_cleanup_job() {\n  source /etc/os-release\n  if [[ $VERSION_ID != 7* ]]; then\n    echo \"Skipped. Detected OS version: $VERSION_ID, not compatible.\"\n    return 0\n  fi\n\n  mkdir -p /var/lib/gravity/cron\n\n  cat \u003e /var/lib/gravity/cron/systemd_gc.sh \u003c\u003c\"EOF\"\n#!/bin/bash\n\necho \"$(date) - Starting systemd_gc job\"\n\ncount=0\nfor i in $(find /sys/fs/cgroup/ -name run-*.scope -type d -printf \"%f\\n\"); do\n  pod=$(systemctl list-units --type scope --state running $i | cat | sed -n 's/\\(.*\\)Kubernetes transient mount for \\/var\\/lib\\/kubelet\\/pods\\/\\(.*\\)\\/volumes\\(.*\\)/\\2/p')\n  if [ ! -f \"/var/lib/kubelet/pods/'$pod'\" ]; then\n    echo -n \"Trying to stop '$i' systemd scope... \"\n    systemctl stop $i\n    echo \"Stopped.\"\n    count=$((count + 1))\n  fi\ndone\n\necho \"Total ${count} systemd scope stopped.\"\necho \"$(date) - Completed systemd_gc job\"\nEOF\n\n  chmod +x /var/lib/gravity/cron/systemd_gc.sh\n\n  ADD_CRON_JOB_CMD=\"cat \u003e /etc/cron.d/systemd_gc \u003c\u003cEOF\nSHELL=/bin/bash\n\n# Can be updated to a different time: 0-59 0-23 * * *\n$(shuf -i 0-59 -n 1) 0 * * * root  /var/lib/gravity/cron/systemd_gc.sh \u003e\u003e /var/lib/gravity/cron/systemd_gc.log 2\u003e\u00261\nEOF\"\n\n  $GRAVITY_BASH \"$ADD_CRON_JOB_CMD\"\n\n  cat \u003e /etc/logrotate.d/systemd_gc \u003c\u003cEOF\n/var/lib/gravity/cron/systemd_gc.log {\n  daily\n  size 10M\n  missingok\n  notifempty\n  rotate 1\n}\nEOF\n\n  $GRAVITY_BASH \"/var/lib/gravity/cron/systemd_gc.sh\"\n\n  echo \"Added cgroup cleanup job.\"\n}\n\nfunction fetch_install_package() {\n    if [[ ! -z $RTF_INSTALL_PACKAGE_URL ]]; then\n        echo \"Fetching installation package \\\"$RTF_INSTALL_PACKAGE_URL\\\"...\"\n        $CURL_WITH_PROXY $CURL_OPTS $RTF_INSTALL_PACKAGE_URL -o installer.tar.gz\n    else\n        until [ -f $BASE_DIR/installer.tar.gz ]; do\n            echo \"Waiting for installation package at $BASE_DIR/installer.tar.gz...\"\n            sleep 15\n        done\n    fi\n\n    if [ ! -f $BASE_DIR/installer.tar.gz ]; then\n        echo \"Error: failed to fetch installation package. Exiting.\"\n        exit 1\n    fi\n}\n\nfunction install_cluster() {\n    echo \"Extracting installer package...\"\n    mkdir -p installer\n    tar -zxf installer.tar.gz -C installer\n    cd installer\n\n    GRAVITY_VERSION=$(./gravity version | grep \"^Version:\" | awk '{ print $2 }')\n    if [[ ${GRAVITY_VERSION} != \"5.2\"* ]] \u0026\u0026 [ -n \"${RTF_HTTP_PROXY}\" ]; then\n        cat \u003e ../runtime_environment.yaml \u003c\u003cEOF\nkind: RuntimeEnvironment\nversion: v1\nspec:\n  data:\n    HTTP_PROXY: \"${RTF_HTTP_PROXY}\"\n    http_proxy: \"${RTF_HTTP_PROXY}\"\n    HTTPS_PROXY: \"${RTF_HTTP_PROXY}\"\n    NO_PROXY: \"${SYSTEM_NO_PROXY},${RTF_NO_PROXY}\"\nEOF\n    local EXTRA_CONFIG=--config=../runtime_environment.yaml\n    fi\n\n    FLAVOR=dynamic\n    if [ $RTF_NODE_ROLE == \"general_node\" ]; then\n        FLAVOR=demo\n    fi\n\n    ./gravity install --advertise-addr=$RTF_PRIVATE_IP \\\n      --token=$RTF_TOKEN \\\n      --cluster=$RTF_NAME \\\n      --cloud-provider=generic \\\n      --flavor=$FLAVOR \\\n      --role=$RTF_NODE_ROLE \\\n      --pod-network-cidr=$POD_NETWORK_CIDR \\\n      --service-cidr=$SERVICE_CIDR \\\n      --service-uid=$RTF_SERVICE_UID \\\n      --service-gid=$RTF_SERVICE_GID \\\n      ${EXTRA_CONFIG}\n\n    if [ ! -f /usr/bin/gravity ]; then\n        echo \"Error: /usr/bin/gravity does not exist\"\n        exit 1\n    fi\n\n    # ensure we have completed the installation by inspecting our cluster-info cm\n    ${KUBECTL_CMD_PREFIX} get configmap cluster-info -nkube-system \u003e /dev/null\n\n    # load KUBECONFIG environment variable for rtfctl\n    set -o allexport; source /etc/environment; set +o allexport\n\n    cd $BASE_DIR\n}\n\nfunction inject_proxy_into_dockerd() {\n    if [ -z $RTF_HTTP_PROXY ]; then\n        echo \"Skipped. HTTP proxy not configured\"\n        return 0\n    fi\n    # we only need this for 5.2.* versions\n    if [[ ${GRAVITY_VERSION} != \"5.2\"* ]]; then\n        return 0\n    fi\n\n    echo \"Injecting HTTP proxy into Docker daemon...\"\n\n    DOCKER_PROXY_VARS_CMD=\"cat \u003e /etc/systemd/system/docker.service.d/http-proxy-vars.conf \u003c\u003cEOF\nHTTP_PROXY=$RTF_HTTP_PROXY\nHTTPS_PROXY=$RTF_HTTP_PROXY\nNO_PROXY=$SYSTEM_NO_PROXY,$RTF_NO_PROXY\nEOF\"\n    $GRAVITY_BASH \"$DOCKER_PROXY_VARS_CMD\"\n\n    # we use EnvironmentFile so that systemd can parse special characters in the proxy string\n    DOCKER_PROXY_CMD=\"cat \u003e /etc/systemd/system/docker.service.d/http-proxy.conf \u003c\u003cEOF\n[Service]\nEnvironmentFile=/etc/systemd/system/docker.service.d/http-proxy-vars.conf\nEOF\"\n    $GRAVITY_BASH \"$DOCKER_PROXY_CMD\"\n\n    gravity planet enter -- --notty  /usr/bin/systemctl -- daemon-reload\n    gravity planet enter -- --notty  /usr/bin/systemctl -- restart docker\n}\n\nfunction join_cluster() {\n    echo \"Joining cluster, waiting for installer node to complete...\"\n\n    # disable exit-on-error\n    set +e\n    until [ -f gravity ]; do\n        sleep 15\n        curl $CURL_OPTS https://$RTF_INSTALLER_IP:32009/telekube/gravity -o gravity\n    done\n    chmod +x gravity\n\n    # if we are setting the proxy, we must wait until the agent has installed, because it\n    # restarts dockerd on the leader and causes join to hang for v1.0.x installers\n    GRAVITY_VERSION=$(./gravity version | grep \"^Version:\" | awk '{ print $2 }')\n    if [[ ${GRAVITY_VERSION} == \"5.2\"* ]] \u0026\u0026 [ -n $RTF_HTTP_PROXY ]; then\n        until [ -f .rtf_installed_flag ]; do\n            sleep 15\n            curl $CURL_OPTS http://$RTF_INSTALLER_IP:30945/api/v1/status/info -o .rtf_installed_flag\n        done\n    fi\n\n    COUNT=0\n    while :\n    do\n        export GRAVITY_PEER_CONNECT_TIMEOUT=60m\n        ./gravity join $RTF_INSTALLER_IP --advertise-addr=$RTF_PRIVATE_IP --token=$RTF_TOKEN --cloud-provider=generic --role=$RTF_NODE_ROLE\n\n        if [ \"$?\" == \"0\" ]; then\n            if [ ! -f /usr/bin/gravity ]; then\n                echo \"Error: /usr/bin/gravity does not exist\"\n                exit 1\n            fi\n            break\n        fi\n\n        let COUNT=COUNT+1\n        if [ $COUNT -ge $JOINING_ATTEMPTS ]; then\n            echo \"Error: Failed to register $COUNT times, giving up.\"\n            exit 1\n        fi\n        echo \"Retrying joining the cluster in 30 seconds...\"\n        sleep 30\n    done\n\n    # enable exit-on-error\n    set -e\n}\n\nfunction create_rtf_namespace() {\n    ${KUBECTL_CMD_PREFIX} create ns rtf || true\n    ${KUBECTL_CMD_PREFIX} label ns rtf rtf.mulesoft.com/role=rtf || true\n}\n\nfunction install_rtf_components() {\n    if [ -z \"$RTF_ACTIVATION_TOKEN\" ]; then\n        echo \"Skipped. RTF_ACTIVATION_TOKEN not set.  Creating namespace only.\"\n        create_rtf_namespace\n        return 0\n    fi\n\n    if [ -z \"$RTF_AGENT_URL\" ]; then\n        HTTP_PROXY=\"$RTF_HTTP_PROXY\" MONITORING_PROXY=\"$RTF_MONITORING_PROXY\" ./rtfctl install ${RTF_ACTIVATION_DATA}\n    else\n        HTTP_PROXY=\"$RTF_HTTP_PROXY\" MONITORING_PROXY=\"$RTF_MONITORING_PROXY\" ./rtfctl install ${RTF_ACTIVATION_DATA} --helm-chart-location ${RTF_AGENT_URL}\n    fi\n}\n\nfunction wait_for_connectivity() {\n    ./rtfctl wait\n}\n\nfunction install_mule_license() {\n    if [ -z \"$RTF_MULE_LICENSE\" ]; then\n        echo \"Skipped. RTF_MULE_LICENSE not set\"\n        return 0\n    fi\n    echo \"Configuring Mule license...\"\n    ./rtfctl apply mule-license \"$RTF_MULE_LICENSE\"\n}\n\nfunction generate_ops_center_credentials() {\n    ADMIN_PASSWORD=\"$(env LC_CTYPE=C tr -dc 'a-zA-Z0-9' \u003c /dev/urandom | head -c50)\" || true\n    if [ -z \"$ADMIN_PASSWORD\" ]; then\n        echo \"Error: Failed to generate admin password\"\n        exit 1;\n    fi\n\n    set +e\n    OPCENTER_CMD=\"gravity planet enter -- --notty /usr/bin/gravity -- user create --type=admin --email=admin@runtime-fabric --password=$ADMIN_PASSWORD --ops-url=https://gravity-site.kube-system.svc.cluster.local:3009 --insecure\"\n\n    eval $OPCENTER_CMD\n    CMD_EXIT_CODE=$?\n\n    COUNT=1\n    until [ \"$CMD_EXIT_CODE\" == \"0\" ]; do\n        echo\n        echo \"Retrying OpsCenter credentials in 30 seconds...\"\n        sleep 30\n        eval $OPCENTER_CMD\n        CMD_EXIT_CODE=$?\n        let COUNT=COUNT+1\n        if [ $COUNT -ge 5 ]; then\n            echo \"Error: Failed to generate OpsCenter credentials $COUNT times, giving up.\"\n            exit 1\n        fi\n    done\n    # enable exit-on-error\n    set -e\n\n    echo \"Ops Center access:\"\n    echo \"URL:      https://$RTF_PRIVATE_IP:32009/web\"\n    echo \"User:     admin@runtime-fabric\"\n    echo \"Password: $ADMIN_PASSWORD\"\n}\n\nfunction set_inotify_limit() {\n    sysctl -w fs.inotify.max_user_watches=1048576\n    echo \"fs.inotify.max_user_watches=1048576\" \u003e /etc/sysctl.d/inotify.conf\n}\n\nfunction purge() {\n    echo \"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"\n    echo \"  WARNING: THIS WILL REMOVE ALL RUNTIME FABRIC COMPONENTS AND APPLICATIONS\"\n    echo \"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"\n    read -p \"Continue (y/n)? \" choice\n    case \"$choice\" in\n        y|Y )\n            echo \"Removing RTF components...\"\n            ${HELM} delete runtime-fabric --purge || true\n\n            ${KUBECTL_CMD_PREFIX} get secret custom-properties -nrtf --export -oyaml \u003e custom_properties.yaml\n            echo \"Removing applications...\"\n            gravity planet enter -- --notty /usr/bin/kubectl -- delete ns -l rtf.mulesoft.com/role || true\n            while [ true ]; do\n                NS_REMAINING=$(gravity planet enter -- --notty /usr/bin/kubectl -- get ns --no-headers --ignore-not-found -l rtf.mulesoft.com/role | wc -l)\n                if [ \"$NS_REMAINING\" == \"0\" ]; then\n                    break\n                fi\n                sleep 1\n                echo \"Waiting for $NS_REMAINING namespaces to be removed...\"\n            done\n            rm .state/install_rtf_components .state/install_mule_license .state/wait_for_connectivity .state/init-complete || true\n        ;;\n\n    n|N ) exit\n        ;;\n    * ) echo \"Unexpected response\";;\n  esac\n  echo\n  echo \"Purge complete.\"\n}\n\nfunction activate() {\n  if [ -z \"$1\" ]; then\n    echo \"Activation data is missing, use the following: ./init.sh activate '\u003cactivation data snippet\u003e'\"\n    exit\n  fi\n\n  load_environment\n  detect_properties\n  RTF_ACTIVATION_DATA=\"$1\"\n  decode_activation_data\n  fetch_activation_properties\n  validate_properties\n  create_rtf_namespace\n\n  # if we backed up custom-properties during purge, reapply it now\n  if [ -f custom_properties.yaml ]; then\n    cp custom_properties.yaml /var/lib/gravity/rtf_custom_properties.yaml\n    ${KUBECTL_CMD_PREFIX} apply -nrtf -f /var/lib/gravity/rtf_custom_properties.yaml\n  fi\n\n  install_rtf_components\n  exit\n}\n\nfunction reinstall() {\n    RTF_ENV=${RTF_ENV:-prod}\n\n    printf \"\\nAnypoint Platform environment: ${RTF_ENV}\\n\\n\"\n\n    # reinstall is only valid to run when we have runtime-fabric installed.\n    ${HELM} status runtime-fabric\n\n    # Clean up temp directory...\n    mkdir -p reinstall-data\n    rm -rf reinstall-data/*\n\n    echo \"Discovering current configuration...\"\n\n    if [ -z $RTF_VERSION ]; then\n        RTF_VERSION=$(${KUBECTL_CMD_PREFIX} get deployment deployer -nrtf -o jsonpath=\"{.spec.template.spec.containers[0].image}\" | cut -d: -f 2 | cut -dv -f 2)\n    fi\n    echo \" - version: ${RTF_VERSION}\"\n\n    AWS_ACCESS_KEY_ID=$(${KUBECTL_CMD_PREFIX} get secret registry-creds -nrtf -ojsonpath=\"{.data.AWS_ACCESS_KEY_ID}\" | base64 -d)\n    AWS_SECRET_ACCESS_KEY=$(${KUBECTL_CMD_PREFIX} get secret registry-creds -nrtf -ojsonpath=\"{.data.AWS_SECRET_ACCESS_KEY}\" | base64 -d)\n    AWS_DEFAULT_REGION=$(${KUBECTL_CMD_PREFIX} get secret registry-creds -nrtf -ojsonpath=\"{.data.AWS_REGION}\" | base64 -d)\n\n    ${HELM} get values runtime-fabric \u003e reinstall-data/values.yaml\n\n    echo\n    echo \"Fetching RTF installation package...\"\n    awsFile=\"rtf-agent-${RTF_VERSION}.tgz\"\n    bucket=\"worker-cloud-helm-${RTF_ENV}\"\n    resource=\"/${bucket}/${awsFile}\"\n    contentType=\"application/x-compressed-tar\"\n    dateValue=`TZ=GMT date -R`\n    stringToSign=\"GET\\n\\n${contentType}\\n${dateValue}\\n${resource}\"\n    signature=`echo -en ${stringToSign} | openssl sha1 -hmac ${AWS_SECRET_ACCESS_KEY} -binary | base64`\n    curl --fail -H \"Host: ${bucket}.s3.amazonaws.com\" \\\n         -H \"Date: ${dateValue}\" \\\n         -H \"Content-Type: ${contentType}\" \\\n         -H \"Authorization: AWS ${AWS_ACCESS_KEY_ID}:${signature}\" \\\n         https://${bucket}.s3.amazonaws.com/${awsFile} -o reinstall-data/rtf-agent.tgz\n\n    cp -r reinstall-data /var/lib/gravity\n\n    echo\n    echo \"Removing current configuration...\"\n    ${HELM} delete --purge runtime-fabric\n\n    # reinstall\n    ${HELM} install /var/lib/gravity/reinstall-data/rtf-agent.tgz --name runtime-fabric --namespace rtf --wait -f /var/lib/gravity/reinstall-data/values.yaml\n    rm -rf /var/lib/gravity/reinstall-data\n}\n\n\n\n##########################################\n# Entrypoint\n##########################################\n\n# Also log output to file\nexec \u003e\u0026 \u003e(tee -a \"$REDIRECT_LOG\")\n\ncheck_root_user\n\nmkdir -p $BASE_DIR\nmkdir -p $STATE_DIR\n\nSCRIPT_DIR=$(realpath $BASH_SOURCE)\nif [[ $SCRIPT_DIR != ${BASE_DIR}* ]]; then\n   cp $BASH_SOURCE $BASE_DIR/init.sh || true\nfi\n\ncd $BASE_DIR\n\nif [ \"$1\" == \"purge\" ]; then\n    purge\n    exit\nelif [ \"$1\" == \"activate\" ]; then\n    activate \"$2\"\n    exit\nelif [ \"$1\" == \"reinstall-components\" ]; then\n    reinstall\n    exit\nelif [ \"$1\" == \"configure-system\" ]; then\n    STEP_COUNT=3\n    run_step set_inotify_limit \"Set inotify watch limits\"\n    run_step add_cgroup_cleanup_job \"Add cgroup cleanup job\"\n    run_step start_system_services \"Start system services\"\n    exit\nelif [ \"$1\" != \"\" ]; then\n    echo \"Invalid command: $1\"\n    exit 1\nfi\n\necho \"Runtime Fabric installation, version: $SCRIPT_VERSION\"\necho\n\necho -e \"Detecting properties...\"\nload_environment\ndetect_properties\ndecode_activation_data\nfetch_activation_properties\nvalidate_properties\n\nif [ \"$RTF_INSTALL_ROLE\" == \"leader\" ]; then\n    STEP_COUNT=15\nelse\n    STEP_COUNT=10\nfi\n\n# Cluster Setup\nrun_step install_required_packages \"Install required packages\"\nrun_step format_and_mount_disks \"Format and mount disks\"\nrun_step configure_ip_tables \"Configure IP tables rules\"\nrun_step configure_kernel_modules \"Enable kernel modules\"\nrun_step set_inotify_limit \"Set inotify watch limits\"\nrun_step start_system_services \"Start system services\"\nrun_step fetch_rtfctl \"Fetch rtfctl tool\"\nif [ \"$RTF_INSTALL_ROLE\" == \"leader\" ]; then\n    run_step fetch_install_package \"Fetch installation package\"\n    run_step install_cluster \"Create cluster\"\n    run_step generate_ops_center_credentials \"Generate Ops Center credentials\"\nelse\n    run_step join_cluster \"Join cluster\"\nfi\nrun_step inject_proxy_into_dockerd \"Configure dockerd proxy\"\nrun_step add_cgroup_cleanup_job \"Add cgroup cleanup job\"\n\n# RTF Setup\nif [ \"$RTF_INSTALL_ROLE\" == \"leader\" ]; then\n    run_step install_rtf_components \"Install RTF components\"\n    run_step install_mule_license \"Install Mule license\"\n    run_step wait_for_connectivity \"Wait for connectivity\"\nfi\n\necho -e \"Runtime Fabric installation complete.\"\ntouch $STATE_DIR/init-complete\n",
                "content_type": "text/x-shellscript",
                "filename": "init.sh",
                "merge_type": ""
              }
            ],
            "rendered": "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"
          }
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_cloudinit_config",
      "name": "inbound_traffic_controller",
      "provider": "provider.template",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "base64_encode": true,
            "gzip": true,
            "id": "1798912875",
            "part": [
              {
                "content": "#!/bin/bash\n\nmkdir -p /opt/anypoint/runtimefabric\ncat \u003e\u003e /opt/anypoint/runtimefabric/env \u003c\u003cEOF\nRTF_NODE_ROLE=dedicated_ingress_node\nRTF_INSTALL_ROLE=joiner\nRTF_DOCKER_DEVICE_SIZE=50G\nRTF_TOKEN=\"sOH0xEcUA1x7tpbZ\"\nRTF_INSTALLER_IP=\"192.168.61.116\"\nEOF\n",
                "content_type": "text/x-shellscript",
                "filename": "envvars.sh",
                "merge_type": ""
              },
              {
                "content": "#!/bin/bash\nset -eo pipefail\n\n# Constants\nSCRIPT_VERSION='20200117-a53e64e'\nREDIRECT_LOG=/var/log/rtf-init.log\nFSTAB_COMMENT=\"# Added by RTF\"\nBASE_DIR=/opt/anypoint/runtimefabric\nSTATE_DIR=$BASE_DIR/.state\nSKIP_TEXT=\"Skipped. Already executed.\"\nMETADATA_IP=169.254.169.254\nCURL_OPTS=\"-L -k -sS --fail --connect-timeout 10 --retry 5 --retry-delay 15\"\nCURL_METADATA_OPTS=\"${CURL_OPTS} --noproxy ${METADATA_IP}\"\nAWS_METADATA_URL=http://$METADATA_IP/latest/meta-data\nAZURE_METADATA_HEADER=\"Metadata:true\"\nAZURE_METADATA_URL=http://$METADATA_IP/metadata/instance\nAZURE_METADATA_VERSION=2017-08-01\nDOCKER_MOUNT=/var/lib/gravity\nETCD_MOUNT=/var/lib/gravity/planet/etcd\nREGISTRATION_ATTEMPTS=5\nJOINING_ATTEMPTS=10\nGRAVITY_BASH=\"gravity planet enter -- --notty /usr/bin/bash -- -c\"\nSYSTEM_NO_PROXY=\"kubernetes.default.svc,.local,0.0.0.0/0\"\nACTIVATION_PROPERTIES_FILE=activation-properties.json\nKUBECTL_CMD_PREFIX=${KUBECTL_CMD_PREFIX:-\"gravity planet enter -- --notty /usr/bin/kubectl --\"}\nHELM=\"gravity planet enter -- --notty /usr/bin/helm --\"\nCURRENT_STEP=init\nCURRENT_STEP_NBR=0\nSEP=\"Done.\\n\"\nLINE=\"\\n================================================\"\n\n# Defaults\nRTF_SERVICE_UID=${RTF_SERVICE_UID:-1000}\nRTF_SERVICE_GID=${RTF_SERVICE_GID:-1000}\nPOD_NETWORK_CIDR=${POD_NETWORK_CIDR:-10.244.0.0/16}\nSERVICE_CIDR=${SERVICE_CIDR:-10.100.0.0/16}\n\n# ADDITIONAL_ENV_VARS_PLACEHOLDER_DO_NOT_REMOVE\n\n# detect OS\ncase \"$(uname -s)\" in\n    Darwin*)\n      BASE64_DECODE_OPTS=\"-D\"\n      ;;\n    *)\n      BASE64_DECODE_OPTS=\"-d\"\nesac\n\nfunction on_exit {\n  local trap_code=$?\n  if [ $trap_code -ne 0 ] ; then\n    local ANCHOR=$(echo ${CURRENT_STEP} | tr \"_\" \"-\")\n    echo\n    echo \"***********************************************************\"\n    echo \"** Oh no! Your installation has stopped due to an error. **\"\n    echo \"***********************************************************\"\n    echo \"  1. Visit the troubleshooting guide for help:\"\n    echo \"     https://docs.mulesoft.com/runtime-fabric/latest/troubleshoot-guide#${ANCHOR}\"\n    echo\n    echo \"  2. Resume installation by running ${BASE_DIR}/init.sh\"\n    echo\n    echo \"Additional information: Error code: $trap_code; Step: ${CURRENT_STEP}; Line: ${TRAP_LINE:--};\"\n    echo\n\n  fi\n\n  echo -n $SCRIPT_VERSION \u003e $STATE_DIR/version\n}\n\nfunction on_error {\n    TRAP_LINE=$1\n}\n\ntrap 'on_error $LINENO' ERR\ntrap on_exit EXIT\n\nfunction run_step() {\n    CURRENT_STEP=$1\n    local DESCRIPTION=$2\n    (( CURRENT_STEP_NBR++ )) || true\n    echo\n    echo -e \"${CURRENT_STEP_NBR} / ${STEP_COUNT}: ${DESCRIPTION}${LINE}\"\n    if [ -f ${STATE_DIR}/${CURRENT_STEP} ]; then\n        echo ${SKIP_TEXT}\n        return 0\n    fi\n    eval ${CURRENT_STEP}\n    touch ${STATE_DIR}/${CURRENT_STEP}\n    echo -e ${SEP}\n}\n\nfunction simple_json_get () {\n    local prop=$1\n    local json=$2\n    local regex=\"\\\"$prop\\\":\\\"([^\\\"]+)\\\"\"\n\n    if [[ $json =~ $regex ]]; then\n        echo -n ${BASH_REMATCH[1]}\n    else\n        echo \"Error: Failed to extract json property: \\\"$prop\\\" from $json\"\n        exit 1\n    fi\n}\n\nfunction check_root_user() {\n    CURRENT_STEP=$FUNCNAME\n    if [[ $EUID -ne 0 ]]; then\n        echo \"Error: You are not running as root. Runtime Fabric requires elevated privileges to install.\"\n        return 1\n    fi\n}\n\nfunction load_environment {\n    CURRENT_STEP=$FUNCNAME\n    if [ -f $BASE_DIR/env ]; then\n        . $BASE_DIR/env\n    fi\n\n    if [ -z \"$RTF_HTTP_PROXY\" ]; then\n        RTF_HTTP_PROXY=${HTTP_PROXY:-}\n    fi\n\n    if [ -z \"$RTF_NO_PROXY\" ]; then\n        RTF_NO_PROXY=${NO_PROXY:-}\n    fi\n}\n\nfunction decode_activation_data() {\n    CURRENT_STEP=$FUNCNAME\n    if [ \"$RTF_ACTIVATION_DATA\" == \"skip\" ]; then\n        echo \"Skipped $CURRENT_STEP. RTF_ACTIVATION_DATA=skip.\"\n        return 0\n    fi\n    decoded=$(echo -n $RTF_ACTIVATION_DATA | base64 $BASE64_DECODE_OPTS)\n    RTF_ENDPOINT=$(echo $decoded | cut -d':' -f 1)\n    RTF_ACTIVATION_TOKEN=$(echo $decoded | cut -d':' -f 2)\n}\n\nfunction fetch_activation_properties() {\n    CURRENT_STEP=$FUNCNAME\n    if [ -z \"$RTF_ACTIVATION_TOKEN\" ]; then\n        echo \"Skipped $CURRENT_STEP. RTF_ACTIVATION_TOKEN not set.\"\n        return 0\n    fi\n    if [ -f $STATE_DIR/install_rtf_components ]; then\n        echo \"Skipped $CURRENT_STEP. Not installing RTF components.\"\n        return 0\n    fi\n    echo \"Fetching activation properties...\"\n\n    if [ ! -z $RTF_ENDPOINT ] \u0026\u0026 [[ $RTF_ENDPOINT != http* ]]; then\n        RTF_ENDPOINT=\"https://$RTF_ENDPOINT\"\n    fi\n\n    COUNT=0\n    while :\n    do\n        CODE=$($CURL_WITH_PROXY $CURL_OPTS -w \"%{http_code}\" $RTF_ENDPOINT/runtimefabric/api/activationData -H \"Authorization: $RTF_ACTIVATION_TOKEN\" -H \"Accept: application/json\" -o $ACTIVATION_PROPERTIES_FILE || true)\n        if [ \"$CODE\" == \"200\" ]; then\n            break\n        fi\n        let COUNT=COUNT+1\n        if [ $COUNT -ge 8 ]; then\n            echo \"Error: Failed to fetch $COUNT times, giving up.\"\n            exit 1\n        fi\n        echo \"Retrying in $((10 * $COUNT)) seconds...\"\n        sleep $((10 * $COUNT))\n    done\n\n    if [ -z \"$RTF_INSTALL_PACKAGE_URL\" ]; then\n        RTF_INSTALL_PACKAGE_URL=$(simple_json_get RTF_INSTALL_PACKAGE_URL `cat $ACTIVATION_PROPERTIES_FILE`)\n    fi\n\n    if [ ! -z $RTF_INSTALL_PACKAGE_URL ] \u0026\u0026 [[ $RTF_INSTALL_PACKAGE_URL != http* ]]; then\n        RTF_INSTALL_PACKAGE_URL=\"https://$RTF_INSTALL_PACKAGE_URL\"\n    fi\n\n    rm $ACTIVATION_PROPERTIES_FILE\n}\n\nfunction detect_properties() {\n    CURRENT_STEP=$FUNCNAME\n    if [ -z \"$RTF_PRIVATE_IP\" ]; then\n        echo \"RTF_PRIVATE_IP is not set, attempting to detect cloud provider\"\n\n        # Detect cloud provider by hitting instance metadata service. For azure, tags are converted to ENV_VARs\n        HTTP_CODE=$(curl $CURL_METADATA_OPTS -o /dev/null -w \"%{http_code}\" $AWS_METADATA_URL/ || true)\n        if [ $HTTP_CODE == 200 ]; then\n            echo \"Detected cloud provider: AWS\"\n            RTF_PRIVATE_IP=$(curl $CURL_METADATA_OPTS $AWS_METADATA_URL/local-ipv4)\n        else\n            HTTP_CODE=$(curl $CURL_METADATA_OPTS -o /dev/null -w \"%{http_code}\" -H$AZURE_METADATA_HEADER \"$AZURE_METADATA_URL/?api-version=$AZURE_METADATA_VERSION\" || true)\n            if [ $HTTP_CODE == 200 ]; then\n                echo \"Detected cloud provider: Azure\"\n                RTF_PRIVATE_IP=$(curl $CURL_METADATA_OPTS -H$AZURE_METADATA_HEADER \"$AZURE_METADATA_URL/network/interface/0/ipv4/ipAddress/0/privateIpAddress?api-version=$AZURE_METADATA_VERSION\u0026format=text\")\n                TAGS=$(curl $CURL_METADATA_OPTS -H$AZURE_METADATA_HEADER \"$AZURE_METADATA_URL/compute/tags?api-version=$AZURE_METADATA_VERSION\u0026format=text\")\n                IFS=';' read -ra TAG_ARRAY \u003c\u003c\u003c \"$TAGS\"\n                for i in \"${TAG_ARRAY[@]}\"; do\n                    IFS=':' read -ra THIS_TAG \u003c\u003c\u003c \"$i\"\n                    declare -g \"${THIS_TAG[0]}=${THIS_TAG[1]}\"\n                done\n            fi\n        fi\n    fi\n\n    if [ -z $RTF_HTTP_PROXY ]; then\n        CURL_WITH_PROXY=\"curl\"\n    else\n        CURL_WITH_PROXY=\"curl --proxy $RTF_HTTP_PROXY\"\n    fi\n\n    # Update NO_PROXY to make sure we bypass local addresses\n    export NO_PROXY=\"0.0.0.0/0,.local,${NO_PROXY}\"\n\n    return 0\n}\n\nfunction validate_properties() {\n    CURRENT_STEP=$FUNCNAME\n    echo \"Validating properties...\"\n    echo RTF_PRIVATE_IP: $RTF_PRIVATE_IP\n    echo RTF_NODE_ROLE: $RTF_NODE_ROLE\n    echo RTF_INSTALL_ROLE: $RTF_INSTALL_ROLE\n    echo RTF_DOCKER_DEVICE: $RTF_DOCKER_DEVICE\n    echo RTF_ETCD_DEVICE: $RTF_ETCD_DEVICE\n    echo RTF_DOCKER_DEVICE_SIZE: $RTF_DOCKER_DEVICE_SIZE\n    echo RTF_ETCD_DEVICE_SIZE: $RTF_ETCD_DEVICE_SIZE\n    echo RTF_HTTP_PROXY: $RTF_HTTP_PROXY\n    echo RTF_NO_PROXY: $RTF_NO_PROXY\n    echo HTTP_PROXY: $HTTP_PROXY\n    echo HTTPS_PROXY: $HTTPS_PROXY\n    echo NO_PROXY: $NO_PROXY\n    echo RTF_MONITORING_PROXY: $RTF_MONITORING_PROXY\n    echo RTF_SERVICE_UID: $RTF_SERVICE_UID\n    echo RTF_SERVICE_GID: $RTF_SERVICE_GID\n\n    [ -z \"$RTF_INSTALL_ROLE\" ] \u0026\u0026 echo \"Error: RTF_INSTALL_ROLE not set\" \u0026\u0026 exit 1\n    [ -z \"$RTF_NODE_ROLE\" ] \u0026\u0026 echo \"Error: RTF_NODE_ROLE not set\" \u0026\u0026 exit 1\n\n    # Install-leader properties\n    if [ $RTF_INSTALL_ROLE == \"leader\" ]; then\n        echo RTF_INSTALL_PACKAGE_URL: $RTF_INSTALL_PACKAGE_URL\n        echo RTF_TOKEN: $RTF_TOKEN\n        echo RTF_NAME: $RTF_NAME\n        # Registration properties\n        echo RTF_ACTIVATION_TOKEN: $RTF_ACTIVATION_TOKEN\n        echo RTF_MULE_LICENSE: ...$(echo $RTF_MULE_LICENSE | tail -c 10)\n        [ -z \"$RTF_NAME\" ] \u0026\u0026 echo \"Error: RTF_NAME not set\" \u0026\u0026 exit 1\n    else\n        echo RTF_INSTALLER_IP: $RTF_INSTALLER_IP\n        [ -z \"$RTF_INSTALLER_IP\" ] \u0026\u0026 echo \"Error: RTF_INSTALLER_IP\" \u0026\u0026 exit 1\n    fi\n\n    [ -z \"$RTF_PRIVATE_IP\" ] \u0026\u0026 echo \"Error: RTF_PRIVATE_IP not set\" \u0026\u0026 exit 1\n    [ -z \"$RTF_DOCKER_DEVICE\" ] \u0026\u0026 [ -z \"$RTF_DOCKER_DEVICE_SIZE\" ] \u0026\u0026 echo \"Error: RTF_DOCKER_DEVICE or RTF_DOCKER_DEVICE_SIZE must be set\" \u0026\u0026 exit 1\n    [ -z \"$RTF_TOKEN\" ] \u0026\u0026 echo \"Error: RTF_TOKEN not set\" \u0026\u0026 exit 1\n\n    if [ $RTF_NODE_ROLE == \"controller_node\" ] || [ $RTF_NODE_ROLE == \"general_node\" ]; then\n        [ -z \"$RTF_ETCD_DEVICE\" ] \u0026\u0026 [ -z \"$RTF_ETCD_DEVICE_SIZE\" ] \u0026\u0026 echo \"Error: RTF_ETCD_DEVICE or RTF_ETCD_DEVICE_SIZE must be set\" \u0026\u0026 exit 1\n    fi\n    return 0\n}\n\nfunction install_required_packages() {\n    #disable exit-on-error\n    set +e\n    rpm -q chrony\n    if [ $? != 0 ]; then\n        echo \"Installing chrony...\"\n        yum install -y chrony || true\n    fi\n\n    printf \"Checking chrony sync status...\"\n    COUNT=0\n    while :\n    do\n        chronyc tracking | grep -E 'Leap status\\s+:\\s+Normal'\n        if [ \"$?\" == \"0\" ]; then\n            echo \"[OK]\"\n            break\n        fi\n        let COUNT=COUNT+1\n        if [ $COUNT -ge \"3\" ]; then\n            echo \"Error: chrony sync check failed $COUNT times, giving up.\"\n            exit 1\n        fi\n        echo \"Retrying in 30 seconds...\"\n        sleep 30\n    done\n    # enable exit-on-error\n    set -e\n}\n\n\nfunction format_and_mount_disks() {\n\n    # if we specify the size, discover the disk from lsblk\n    if [ -n \"$RTF_DOCKER_DEVICE_SIZE\" ]; then\n        set +e\n        RTF_DOCKER_DEVICE=/dev/$(lsblk --inverse --nodeps --noheadings --output NAME,TYPE,SIZE | grep $RTF_DOCKER_DEVICE_SIZE | cut -d ' ' -f 1 | head -n1)\n        set -e\n        if [ \"$RTF_DOCKER_DEVICE\" == \"/dev/\" ]; then\n            echo \"Error: $RTF_DOCKER_DEVICE_SIZE docker disk not found\"\n            lsblk\n            exit 1\n        fi\n    else\n        # devices could be symlinks, resolve now\n        if [ -f $RTF_DOCKER_DEVICE ]; then\n            RTF_DOCKER_DEVICE=$(readlink -fe \"$RTF_DOCKER_DEVICE\")\n        fi\n        # ensure device is a real block device\n        echo \"Querying block devices for $RTF_DOCKER_DEVICE...\"\n        lsblk $RTF_DOCKER_DEVICE\n    fi\n\n    echo \"Initializing docker filesystem ($RTF_DOCKER_DEVICE)...\"\n    if [ -d \"$DOCKER_MOUNT\" ]; then\n        umount -l $DOCKER_MOUNT || true\n        rm -r $DOCKER_MOUNT\n    fi\n    mkfs.xfs -n ftype=1 -f $RTF_DOCKER_DEVICE\n    # get the UUID\n    RTF_DOCKER_DEVICE_UUID=$(blkid $RTF_DOCKER_DEVICE -ovalue | head -1)\n\n    sed -i.bak '/RTF/d' /etc/fstab\n    echo -e \"UUID=$RTF_DOCKER_DEVICE_UUID\\t$DOCKER_MOUNT\\txfs\\tdefaults,nofail\\t0\\t2\\t$FSTAB_COMMENT\" \u003e\u003e /etc/fstab\n\n    mkdir -p $DOCKER_MOUNT\n    mount $DOCKER_MOUNT\n    chown -R $RTF_SERVICE_UID:$RTF_SERVICE_GID $DOCKER_MOUNT\n\n    if [ \"$RTF_NODE_ROLE\" == \"controller_node\" ] || [ $RTF_NODE_ROLE == \"general_node\" ]; then\n\n        # if we specify the size, discover the disk from lsblk\n        if [ -n \"$RTF_ETCD_DEVICE_SIZE\" ]; then\n            set +e\n            RTF_ETCD_DEVICE=/dev/$(lsblk --inverse --nodeps --noheadings --output NAME,TYPE,SIZE | grep $RTF_ETCD_DEVICE_SIZE | cut -d ' ' -f 1 | head -n1)\n            set -e\n            if [ \"$RTF_ETCD_DEVICE\" == \"/dev/\" ]; then\n                echo \"Error: $RTF_ECTD_DEVICE_SIZE etcd disk not found\"\n                lsblk\n                exit 1\n            fi\n        else\n            # devices could be symlinks, resolve now\n            if [ -f $RTF_ETCD_DEVICE ]; then\n                RTF_ETCD_DEVICE=$(readlink -f \"$RTF_ETCD_DEVICE\")\n            fi\n            echo \"Querying block devices for $RTF_ETCD_DEVICE...\"\n            lsblk $RTF_ETCD_DEVICE\n        fi\n        echo \"Initializing etcd filesystem ($RTF_ETCD_DEVICE)...\"\n        if [ -d \"$ETCD_MOUNT\" ]; then\n            umount -l $ETCD_MOUNT || true\n            rm -r $ETCD_MOUNT\n        fi\n        mkfs.xfs -n ftype=1 -f $RTF_ETCD_DEVICE\n        # get the UUID\n        RTF_ETCD_DEVICE_UUID=$(blkid $RTF_ETCD_DEVICE -ovalue | head -1)\n        echo -e \"UUID=$RTF_ETCD_DEVICE_UUID\\t$ETCD_MOUNT\\txfs\\tdefaults,nofail\\t0\\t2\\t$FSTAB_COMMENT\" \u003e\u003e /etc/fstab\n        mkdir -p $ETCD_MOUNT\n        mount $ETCD_MOUNT\n        chown -R $RTF_SERVICE_UID:$RTF_SERVICE_GID $ETCD_MOUNT\n    fi\n}\n\nfunction configure_ip_tables() {\n    systemctl disable firewalld || true\n    systemctl stop firewalld || true\n\n    # Insert IP tables rules\n    echo -e '*filter\\n:INPUT ACCEPT [0:0]\\n:FORWARD ACCEPT [0:0]\\n:OUTPUT ACCEPT [0:0]\\n-A OUTPUT -o lo -j ACCEPT\\n-A OUTPUT -d 172.31.0.0/16 -p tcp -j ACCEPT\\n-A OUTPUT -d 172.31.0.0/16 -p udp -j ACCEPT\\n-A OUTPUT -d 10.0.0.0/8 -p tcp -j ACCEPT\\n-A OUTPUT -d 10.0.0.0/8 -p udp -j ACCEPT\\n-A OUTPUT -p tcp -m tcp ! --tcp-flags FIN,SYN,RST,ACK SYN -j ACCEPT\\n-A OUTPUT -p udp --dport 123 -j ACCEPT\\n-A INPUT -p udp --sport 123 -j ACCEPT\\nCOMMIT' \u003e /etc/rtf-iptables.rules\n    echo -e '[Unit]\\nDescription=Packet Filtering Framework\\n\\n[Service]\\nType=oneshot\\nExecStart=/usr/sbin/iptables-restore /etc/rtf-iptables.rules\\nExecReload=/usr/sbin/iptables-restore /etc/rtf-iptables.rules\\nRemainAfterExit=yes\\n\\n[Install]\\nWantedBy=multi-user.target' \u003e /etc/systemd/system/iptables.service\n}\n\nfunction configure_kernel_modules() {\n    modprobe br_netfilter || true\n    modprobe ebtable_filter || true\n    modprobe overlay || true\n    modprobe ip_tables || true\n    modprobe iptable_filter || true\n    modprobe iptable_nat || true\n\n    cat \u003e /etc/modules-load.d/telekube.conf \u003c\u003cEOF\nip_tables\niptable_nat\niptable_filter\nbr_netfilter\noverlay\nebtable_filter\nEOF\n\n    cat \u003e /etc/sysctl.d/50-telekube.conf \u003c\u003cEOF\nnet.ipv4.ip_forward=1\nnet.bridge.bridge-nf-call-iptables=1\nEOF\n\n    if sysctl -q fs.may_detach_mounts \u003e/dev/null 2\u003e\u00261; then\n      echo \"fs.may_detach_mounts=1\" \u003e\u003e /etc/sysctl.d/50-telekube.conf\n    fi\n\n    sysctl -p /etc/sysctl.d/50-telekube.conf\n}\n\nfunction start_system_services() {\n    systemctl --system daemon-reload\n    systemctl enable iptables.service\n    systemctl enable chronyd\n    systemctl start iptables.service\n    systemctl start chronyd\n}\n\nfunction fetch_rtfctl() {\n    if [[ -z $RTF_ENDPOINT ]]; then\n        RTFCTL_URL=https://anypoint.mulesoft.com/runtimefabric/api/download/rtfctl/latest\n    else\n        RTFCTL_URL=${RTF_ENDPOINT}/runtimefabric/api/download/rtfctl/latest\n    fi\n\n    echo \"Fetching rtfctl ${RTFCTL_URL}...\"\n    $CURL_WITH_PROXY $CURL_OPTS -o rtfctl $RTFCTL_URL\n    chmod +x ./rtfctl\n}\n\nfunction add_cgroup_cleanup_job() {\n  source /etc/os-release\n  if [[ $VERSION_ID != 7* ]]; then\n    echo \"Skipped. Detected OS version: $VERSION_ID, not compatible.\"\n    return 0\n  fi\n\n  mkdir -p /var/lib/gravity/cron\n\n  cat \u003e /var/lib/gravity/cron/systemd_gc.sh \u003c\u003c\"EOF\"\n#!/bin/bash\n\necho \"$(date) - Starting systemd_gc job\"\n\ncount=0\nfor i in $(find /sys/fs/cgroup/ -name run-*.scope -type d -printf \"%f\\n\"); do\n  pod=$(systemctl list-units --type scope --state running $i | cat | sed -n 's/\\(.*\\)Kubernetes transient mount for \\/var\\/lib\\/kubelet\\/pods\\/\\(.*\\)\\/volumes\\(.*\\)/\\2/p')\n  if [ ! -f \"/var/lib/kubelet/pods/'$pod'\" ]; then\n    echo -n \"Trying to stop '$i' systemd scope... \"\n    systemctl stop $i\n    echo \"Stopped.\"\n    count=$((count + 1))\n  fi\ndone\n\necho \"Total ${count} systemd scope stopped.\"\necho \"$(date) - Completed systemd_gc job\"\nEOF\n\n  chmod +x /var/lib/gravity/cron/systemd_gc.sh\n\n  ADD_CRON_JOB_CMD=\"cat \u003e /etc/cron.d/systemd_gc \u003c\u003cEOF\nSHELL=/bin/bash\n\n# Can be updated to a different time: 0-59 0-23 * * *\n$(shuf -i 0-59 -n 1) 0 * * * root  /var/lib/gravity/cron/systemd_gc.sh \u003e\u003e /var/lib/gravity/cron/systemd_gc.log 2\u003e\u00261\nEOF\"\n\n  $GRAVITY_BASH \"$ADD_CRON_JOB_CMD\"\n\n  cat \u003e /etc/logrotate.d/systemd_gc \u003c\u003cEOF\n/var/lib/gravity/cron/systemd_gc.log {\n  daily\n  size 10M\n  missingok\n  notifempty\n  rotate 1\n}\nEOF\n\n  $GRAVITY_BASH \"/var/lib/gravity/cron/systemd_gc.sh\"\n\n  echo \"Added cgroup cleanup job.\"\n}\n\nfunction fetch_install_package() {\n    if [[ ! -z $RTF_INSTALL_PACKAGE_URL ]]; then\n        echo \"Fetching installation package \\\"$RTF_INSTALL_PACKAGE_URL\\\"...\"\n        $CURL_WITH_PROXY $CURL_OPTS $RTF_INSTALL_PACKAGE_URL -o installer.tar.gz\n    else\n        until [ -f $BASE_DIR/installer.tar.gz ]; do\n            echo \"Waiting for installation package at $BASE_DIR/installer.tar.gz...\"\n            sleep 15\n        done\n    fi\n\n    if [ ! -f $BASE_DIR/installer.tar.gz ]; then\n        echo \"Error: failed to fetch installation package. Exiting.\"\n        exit 1\n    fi\n}\n\nfunction install_cluster() {\n    echo \"Extracting installer package...\"\n    mkdir -p installer\n    tar -zxf installer.tar.gz -C installer\n    cd installer\n\n    GRAVITY_VERSION=$(./gravity version | grep \"^Version:\" | awk '{ print $2 }')\n    if [[ ${GRAVITY_VERSION} != \"5.2\"* ]] \u0026\u0026 [ -n \"${RTF_HTTP_PROXY}\" ]; then\n        cat \u003e ../runtime_environment.yaml \u003c\u003cEOF\nkind: RuntimeEnvironment\nversion: v1\nspec:\n  data:\n    HTTP_PROXY: \"${RTF_HTTP_PROXY}\"\n    http_proxy: \"${RTF_HTTP_PROXY}\"\n    HTTPS_PROXY: \"${RTF_HTTP_PROXY}\"\n    NO_PROXY: \"${SYSTEM_NO_PROXY},${RTF_NO_PROXY}\"\nEOF\n    local EXTRA_CONFIG=--config=../runtime_environment.yaml\n    fi\n\n    FLAVOR=dynamic\n    if [ $RTF_NODE_ROLE == \"general_node\" ]; then\n        FLAVOR=demo\n    fi\n\n    ./gravity install --advertise-addr=$RTF_PRIVATE_IP \\\n      --token=$RTF_TOKEN \\\n      --cluster=$RTF_NAME \\\n      --cloud-provider=generic \\\n      --flavor=$FLAVOR \\\n      --role=$RTF_NODE_ROLE \\\n      --pod-network-cidr=$POD_NETWORK_CIDR \\\n      --service-cidr=$SERVICE_CIDR \\\n      --service-uid=$RTF_SERVICE_UID \\\n      --service-gid=$RTF_SERVICE_GID \\\n      ${EXTRA_CONFIG}\n\n    if [ ! -f /usr/bin/gravity ]; then\n        echo \"Error: /usr/bin/gravity does not exist\"\n        exit 1\n    fi\n\n    # ensure we have completed the installation by inspecting our cluster-info cm\n    ${KUBECTL_CMD_PREFIX} get configmap cluster-info -nkube-system \u003e /dev/null\n\n    # load KUBECONFIG environment variable for rtfctl\n    set -o allexport; source /etc/environment; set +o allexport\n\n    cd $BASE_DIR\n}\n\nfunction inject_proxy_into_dockerd() {\n    if [ -z $RTF_HTTP_PROXY ]; then\n        echo \"Skipped. HTTP proxy not configured\"\n        return 0\n    fi\n    # we only need this for 5.2.* versions\n    if [[ ${GRAVITY_VERSION} != \"5.2\"* ]]; then\n        return 0\n    fi\n\n    echo \"Injecting HTTP proxy into Docker daemon...\"\n\n    DOCKER_PROXY_VARS_CMD=\"cat \u003e /etc/systemd/system/docker.service.d/http-proxy-vars.conf \u003c\u003cEOF\nHTTP_PROXY=$RTF_HTTP_PROXY\nHTTPS_PROXY=$RTF_HTTP_PROXY\nNO_PROXY=$SYSTEM_NO_PROXY,$RTF_NO_PROXY\nEOF\"\n    $GRAVITY_BASH \"$DOCKER_PROXY_VARS_CMD\"\n\n    # we use EnvironmentFile so that systemd can parse special characters in the proxy string\n    DOCKER_PROXY_CMD=\"cat \u003e /etc/systemd/system/docker.service.d/http-proxy.conf \u003c\u003cEOF\n[Service]\nEnvironmentFile=/etc/systemd/system/docker.service.d/http-proxy-vars.conf\nEOF\"\n    $GRAVITY_BASH \"$DOCKER_PROXY_CMD\"\n\n    gravity planet enter -- --notty  /usr/bin/systemctl -- daemon-reload\n    gravity planet enter -- --notty  /usr/bin/systemctl -- restart docker\n}\n\nfunction join_cluster() {\n    echo \"Joining cluster, waiting for installer node to complete...\"\n\n    # disable exit-on-error\n    set +e\n    until [ -f gravity ]; do\n        sleep 15\n        curl $CURL_OPTS https://$RTF_INSTALLER_IP:32009/telekube/gravity -o gravity\n    done\n    chmod +x gravity\n\n    # if we are setting the proxy, we must wait until the agent has installed, because it\n    # restarts dockerd on the leader and causes join to hang for v1.0.x installers\n    GRAVITY_VERSION=$(./gravity version | grep \"^Version:\" | awk '{ print $2 }')\n    if [[ ${GRAVITY_VERSION} == \"5.2\"* ]] \u0026\u0026 [ -n $RTF_HTTP_PROXY ]; then\n        until [ -f .rtf_installed_flag ]; do\n            sleep 15\n            curl $CURL_OPTS http://$RTF_INSTALLER_IP:30945/api/v1/status/info -o .rtf_installed_flag\n        done\n    fi\n\n    COUNT=0\n    while :\n    do\n        export GRAVITY_PEER_CONNECT_TIMEOUT=60m\n        ./gravity join $RTF_INSTALLER_IP --advertise-addr=$RTF_PRIVATE_IP --token=$RTF_TOKEN --cloud-provider=generic --role=$RTF_NODE_ROLE\n\n        if [ \"$?\" == \"0\" ]; then\n            if [ ! -f /usr/bin/gravity ]; then\n                echo \"Error: /usr/bin/gravity does not exist\"\n                exit 1\n            fi\n            break\n        fi\n\n        let COUNT=COUNT+1\n        if [ $COUNT -ge $JOINING_ATTEMPTS ]; then\n            echo \"Error: Failed to register $COUNT times, giving up.\"\n            exit 1\n        fi\n        echo \"Retrying joining the cluster in 30 seconds...\"\n        sleep 30\n    done\n\n    # enable exit-on-error\n    set -e\n}\n\nfunction create_rtf_namespace() {\n    ${KUBECTL_CMD_PREFIX} create ns rtf || true\n    ${KUBECTL_CMD_PREFIX} label ns rtf rtf.mulesoft.com/role=rtf || true\n}\n\nfunction install_rtf_components() {\n    if [ -z \"$RTF_ACTIVATION_TOKEN\" ]; then\n        echo \"Skipped. RTF_ACTIVATION_TOKEN not set.  Creating namespace only.\"\n        create_rtf_namespace\n        return 0\n    fi\n\n    if [ -z \"$RTF_AGENT_URL\" ]; then\n        HTTP_PROXY=\"$RTF_HTTP_PROXY\" MONITORING_PROXY=\"$RTF_MONITORING_PROXY\" ./rtfctl install ${RTF_ACTIVATION_DATA}\n    else\n        HTTP_PROXY=\"$RTF_HTTP_PROXY\" MONITORING_PROXY=\"$RTF_MONITORING_PROXY\" ./rtfctl install ${RTF_ACTIVATION_DATA} --helm-chart-location ${RTF_AGENT_URL}\n    fi\n}\n\nfunction wait_for_connectivity() {\n    ./rtfctl wait\n}\n\nfunction install_mule_license() {\n    if [ -z \"$RTF_MULE_LICENSE\" ]; then\n        echo \"Skipped. RTF_MULE_LICENSE not set\"\n        return 0\n    fi\n    echo \"Configuring Mule license...\"\n    ./rtfctl apply mule-license \"$RTF_MULE_LICENSE\"\n}\n\nfunction generate_ops_center_credentials() {\n    ADMIN_PASSWORD=\"$(env LC_CTYPE=C tr -dc 'a-zA-Z0-9' \u003c /dev/urandom | head -c50)\" || true\n    if [ -z \"$ADMIN_PASSWORD\" ]; then\n        echo \"Error: Failed to generate admin password\"\n        exit 1;\n    fi\n\n    set +e\n    OPCENTER_CMD=\"gravity planet enter -- --notty /usr/bin/gravity -- user create --type=admin --email=admin@runtime-fabric --password=$ADMIN_PASSWORD --ops-url=https://gravity-site.kube-system.svc.cluster.local:3009 --insecure\"\n\n    eval $OPCENTER_CMD\n    CMD_EXIT_CODE=$?\n\n    COUNT=1\n    until [ \"$CMD_EXIT_CODE\" == \"0\" ]; do\n        echo\n        echo \"Retrying OpsCenter credentials in 30 seconds...\"\n        sleep 30\n        eval $OPCENTER_CMD\n        CMD_EXIT_CODE=$?\n        let COUNT=COUNT+1\n        if [ $COUNT -ge 5 ]; then\n            echo \"Error: Failed to generate OpsCenter credentials $COUNT times, giving up.\"\n            exit 1\n        fi\n    done\n    # enable exit-on-error\n    set -e\n\n    echo \"Ops Center access:\"\n    echo \"URL:      https://$RTF_PRIVATE_IP:32009/web\"\n    echo \"User:     admin@runtime-fabric\"\n    echo \"Password: $ADMIN_PASSWORD\"\n}\n\nfunction set_inotify_limit() {\n    sysctl -w fs.inotify.max_user_watches=1048576\n    echo \"fs.inotify.max_user_watches=1048576\" \u003e /etc/sysctl.d/inotify.conf\n}\n\nfunction purge() {\n    echo \"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"\n    echo \"  WARNING: THIS WILL REMOVE ALL RUNTIME FABRIC COMPONENTS AND APPLICATIONS\"\n    echo \"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"\n    read -p \"Continue (y/n)? \" choice\n    case \"$choice\" in\n        y|Y )\n            echo \"Removing RTF components...\"\n            ${HELM} delete runtime-fabric --purge || true\n\n            ${KUBECTL_CMD_PREFIX} get secret custom-properties -nrtf --export -oyaml \u003e custom_properties.yaml\n            echo \"Removing applications...\"\n            gravity planet enter -- --notty /usr/bin/kubectl -- delete ns -l rtf.mulesoft.com/role || true\n            while [ true ]; do\n                NS_REMAINING=$(gravity planet enter -- --notty /usr/bin/kubectl -- get ns --no-headers --ignore-not-found -l rtf.mulesoft.com/role | wc -l)\n                if [ \"$NS_REMAINING\" == \"0\" ]; then\n                    break\n                fi\n                sleep 1\n                echo \"Waiting for $NS_REMAINING namespaces to be removed...\"\n            done\n            rm .state/install_rtf_components .state/install_mule_license .state/wait_for_connectivity .state/init-complete || true\n        ;;\n\n    n|N ) exit\n        ;;\n    * ) echo \"Unexpected response\";;\n  esac\n  echo\n  echo \"Purge complete.\"\n}\n\nfunction activate() {\n  if [ -z \"$1\" ]; then\n    echo \"Activation data is missing, use the following: ./init.sh activate '\u003cactivation data snippet\u003e'\"\n    exit\n  fi\n\n  load_environment\n  detect_properties\n  RTF_ACTIVATION_DATA=\"$1\"\n  decode_activation_data\n  fetch_activation_properties\n  validate_properties\n  create_rtf_namespace\n\n  # if we backed up custom-properties during purge, reapply it now\n  if [ -f custom_properties.yaml ]; then\n    cp custom_properties.yaml /var/lib/gravity/rtf_custom_properties.yaml\n    ${KUBECTL_CMD_PREFIX} apply -nrtf -f /var/lib/gravity/rtf_custom_properties.yaml\n  fi\n\n  install_rtf_components\n  exit\n}\n\nfunction reinstall() {\n    RTF_ENV=${RTF_ENV:-prod}\n\n    printf \"\\nAnypoint Platform environment: ${RTF_ENV}\\n\\n\"\n\n    # reinstall is only valid to run when we have runtime-fabric installed.\n    ${HELM} status runtime-fabric\n\n    # Clean up temp directory...\n    mkdir -p reinstall-data\n    rm -rf reinstall-data/*\n\n    echo \"Discovering current configuration...\"\n\n    if [ -z $RTF_VERSION ]; then\n        RTF_VERSION=$(${KUBECTL_CMD_PREFIX} get deployment deployer -nrtf -o jsonpath=\"{.spec.template.spec.containers[0].image}\" | cut -d: -f 2 | cut -dv -f 2)\n    fi\n    echo \" - version: ${RTF_VERSION}\"\n\n    AWS_ACCESS_KEY_ID=$(${KUBECTL_CMD_PREFIX} get secret registry-creds -nrtf -ojsonpath=\"{.data.AWS_ACCESS_KEY_ID}\" | base64 -d)\n    AWS_SECRET_ACCESS_KEY=$(${KUBECTL_CMD_PREFIX} get secret registry-creds -nrtf -ojsonpath=\"{.data.AWS_SECRET_ACCESS_KEY}\" | base64 -d)\n    AWS_DEFAULT_REGION=$(${KUBECTL_CMD_PREFIX} get secret registry-creds -nrtf -ojsonpath=\"{.data.AWS_REGION}\" | base64 -d)\n\n    ${HELM} get values runtime-fabric \u003e reinstall-data/values.yaml\n\n    echo\n    echo \"Fetching RTF installation package...\"\n    awsFile=\"rtf-agent-${RTF_VERSION}.tgz\"\n    bucket=\"worker-cloud-helm-${RTF_ENV}\"\n    resource=\"/${bucket}/${awsFile}\"\n    contentType=\"application/x-compressed-tar\"\n    dateValue=`TZ=GMT date -R`\n    stringToSign=\"GET\\n\\n${contentType}\\n${dateValue}\\n${resource}\"\n    signature=`echo -en ${stringToSign} | openssl sha1 -hmac ${AWS_SECRET_ACCESS_KEY} -binary | base64`\n    curl --fail -H \"Host: ${bucket}.s3.amazonaws.com\" \\\n         -H \"Date: ${dateValue}\" \\\n         -H \"Content-Type: ${contentType}\" \\\n         -H \"Authorization: AWS ${AWS_ACCESS_KEY_ID}:${signature}\" \\\n         https://${bucket}.s3.amazonaws.com/${awsFile} -o reinstall-data/rtf-agent.tgz\n\n    cp -r reinstall-data /var/lib/gravity\n\n    echo\n    echo \"Removing current configuration...\"\n    ${HELM} delete --purge runtime-fabric\n\n    # reinstall\n    ${HELM} install /var/lib/gravity/reinstall-data/rtf-agent.tgz --name runtime-fabric --namespace rtf --wait -f /var/lib/gravity/reinstall-data/values.yaml\n    rm -rf /var/lib/gravity/reinstall-data\n}\n\n\n\n##########################################\n# Entrypoint\n##########################################\n\n# Also log output to file\nexec \u003e\u0026 \u003e(tee -a \"$REDIRECT_LOG\")\n\ncheck_root_user\n\nmkdir -p $BASE_DIR\nmkdir -p $STATE_DIR\n\nSCRIPT_DIR=$(realpath $BASH_SOURCE)\nif [[ $SCRIPT_DIR != ${BASE_DIR}* ]]; then\n   cp $BASH_SOURCE $BASE_DIR/init.sh || true\nfi\n\ncd $BASE_DIR\n\nif [ \"$1\" == \"purge\" ]; then\n    purge\n    exit\nelif [ \"$1\" == \"activate\" ]; then\n    activate \"$2\"\n    exit\nelif [ \"$1\" == \"reinstall-components\" ]; then\n    reinstall\n    exit\nelif [ \"$1\" == \"configure-system\" ]; then\n    STEP_COUNT=3\n    run_step set_inotify_limit \"Set inotify watch limits\"\n    run_step add_cgroup_cleanup_job \"Add cgroup cleanup job\"\n    run_step start_system_services \"Start system services\"\n    exit\nelif [ \"$1\" != \"\" ]; then\n    echo \"Invalid command: $1\"\n    exit 1\nfi\n\necho \"Runtime Fabric installation, version: $SCRIPT_VERSION\"\necho\n\necho -e \"Detecting properties...\"\nload_environment\ndetect_properties\ndecode_activation_data\nfetch_activation_properties\nvalidate_properties\n\nif [ \"$RTF_INSTALL_ROLE\" == \"leader\" ]; then\n    STEP_COUNT=15\nelse\n    STEP_COUNT=10\nfi\n\n# Cluster Setup\nrun_step install_required_packages \"Install required packages\"\nrun_step format_and_mount_disks \"Format and mount disks\"\nrun_step configure_ip_tables \"Configure IP tables rules\"\nrun_step configure_kernel_modules \"Enable kernel modules\"\nrun_step set_inotify_limit \"Set inotify watch limits\"\nrun_step start_system_services \"Start system services\"\nrun_step fetch_rtfctl \"Fetch rtfctl tool\"\nif [ \"$RTF_INSTALL_ROLE\" == \"leader\" ]; then\n    run_step fetch_install_package \"Fetch installation package\"\n    run_step install_cluster \"Create cluster\"\n    run_step generate_ops_center_credentials \"Generate Ops Center credentials\"\nelse\n    run_step join_cluster \"Join cluster\"\nfi\nrun_step inject_proxy_into_dockerd \"Configure dockerd proxy\"\nrun_step add_cgroup_cleanup_job \"Add cgroup cleanup job\"\n\n# RTF Setup\nif [ \"$RTF_INSTALL_ROLE\" == \"leader\" ]; then\n    run_step install_rtf_components \"Install RTF components\"\n    run_step install_mule_license \"Install Mule license\"\n    run_step wait_for_connectivity \"Wait for connectivity\"\nfi\n\necho -e \"Runtime Fabric installation complete.\"\ntouch $STATE_DIR/init-complete\n",
                "content_type": "text/x-shellscript",
                "filename": "init.sh",
                "merge_type": ""
              }
            ],
            "rendered": "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"
          }
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_cloudinit_config",
      "name": "installer",
      "provider": "provider.template",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "base64_encode": true,
            "gzip": true,
            "id": "1139758323",
            "part": [
              {
                "content": "#!/bin/bash\n\nmkdir -p /opt/anypoint/runtimefabric\ncat \u003e\u003e /opt/anypoint/runtimefabric/env \u003c\u003cEOF\nRTF_NODE_ROLE=controller_node\nRTF_INSTALL_ROLE=leader\nRTF_INSTALL_PACKAGE_URL=\"\"\nRTF_ETCD_DEVICE_SIZE=60G\nRTF_DOCKER_DEVICE_SIZE=250G\nRTF_TOKEN=\"sOH0xEcUA1x7tpbZ\"\nRTF_NAME=\"runtime-fabric\"\nRTF_ACTIVATION_DATA=\"YW55cG9pbnQubXVsZXNvZnQuY29tOjdmZDk0OGE5LWMwNGEtNDJiYi1iMTFhLTAyZTNkOWJmMDc0Mw==\"\nRTF_ORG_ID=\"\"\nRTF_REGION=\"us-east-1\"\nRTF_ENDPOINT=\"https://anypoint.mulesoft.com\"\nRTF_AUTH_TOKEN=\"\"\nRTF_MULE_LICENSE='2+W35iUhD9n6UzfSh144qHKlIsjMqSBw/YescXleQkGpfhLfKc4CGYnihgQo/6fKMpYrSCvCybcFkM7GspNi+aVJDAvpGyyfkpeNWx7x0ygE3eFPipCTZ/r/dTOTC8IrpGwcc6bHn1eneO9PMPQrLkqxS6GAbumpGMgoJe23ttaRz94FvcKxkq5IjGQiqnY/U7cKnnwFtK0A+7XiU5J5ROYrBIZPW6QEa31RPdummqQib3eAKn+mBubzLeTsIYcP28ne4T37A1OILlyGtDCML/Jfe/nMfncRzZx6lnuJvz5jlBqaRKSKa3Y6/aySAmOYa1KHWVbVeys8lOi5qbJS3qAzTzP40coX9XBwGo3iHx25NLqtL9b50/4vAOkAfbwSJegaKNJIrhz1dRomVEXBpForc+K9obSIt9FU8uH2HDlNfcytk/GeU2dglfcldrFCYnBYoWHvGcTAHMBxpt8XAu6UWKJs6NVTxHd98ZGDs4W0LHHqHDJUqn+sNMKKSdeTzwEzdMgGsxsYfEv6OUSgOrWMYOngpKDpchMt0ISgVpeNFo2XSCrjnA8cKx9uZ+UbD/d5zYRlU69OmPAUCNNvWNWMcptARZhbM9x+aNfixuOXmQuQUCCo6ln3X9HxTEsYTb6tLk280E9k0atMdddYjZIvhc1uuu1n3iDUgLxypMNtl8S0O4KH/iZ3Z4c6SB8VmaZxI+SHay8FIS9bttbhpLMlGQO1fxn8GH8og1D5ptYQpYhjctkCIHRADlUZ5oo9ZcO415gcn8kTYXa8gMK1Jn/YCNghMU9EFOWHHisCMwa9vdh1YFmTQLJWDklV0OoUHrze0C3csxSY2BlhVWRNceTogY2vQXa8rasxsM9Lz2dy1kGrkhxxNyT4z0YfEvIfCXFVN2csD1QeeKaFwFn6V2k+pxm5PwhOfABQJ9AqJWQ502rzNxXnFDu9yeRyykShA64ZsPrqZyD7KGe3zfj9qGawK+WJJR'\nRTF_HTTP_PROXY=''\nRTF_NO_PROXY=''\nRTF_MONITORING_PROXY=''\nRTF_SERVICE_UID=''\nRTF_SERVICE_GID=''\nRTF_AGENT_URL=''\nPOD_NETWORK_CIDR='10.244.0.0/16'\nSERVICE_CIDR='10.100.0.0/16'\nEOF\n",
                "content_type": "text/x-shellscript",
                "filename": "envvars.sh",
                "merge_type": ""
              },
              {
                "content": "#!/bin/bash\nset -eo pipefail\n\n# Constants\nSCRIPT_VERSION='20200117-a53e64e'\nREDIRECT_LOG=/var/log/rtf-init.log\nFSTAB_COMMENT=\"# Added by RTF\"\nBASE_DIR=/opt/anypoint/runtimefabric\nSTATE_DIR=$BASE_DIR/.state\nSKIP_TEXT=\"Skipped. Already executed.\"\nMETADATA_IP=169.254.169.254\nCURL_OPTS=\"-L -k -sS --fail --connect-timeout 10 --retry 5 --retry-delay 15\"\nCURL_METADATA_OPTS=\"${CURL_OPTS} --noproxy ${METADATA_IP}\"\nAWS_METADATA_URL=http://$METADATA_IP/latest/meta-data\nAZURE_METADATA_HEADER=\"Metadata:true\"\nAZURE_METADATA_URL=http://$METADATA_IP/metadata/instance\nAZURE_METADATA_VERSION=2017-08-01\nDOCKER_MOUNT=/var/lib/gravity\nETCD_MOUNT=/var/lib/gravity/planet/etcd\nREGISTRATION_ATTEMPTS=5\nJOINING_ATTEMPTS=10\nGRAVITY_BASH=\"gravity planet enter -- --notty /usr/bin/bash -- -c\"\nSYSTEM_NO_PROXY=\"kubernetes.default.svc,.local,0.0.0.0/0\"\nACTIVATION_PROPERTIES_FILE=activation-properties.json\nKUBECTL_CMD_PREFIX=${KUBECTL_CMD_PREFIX:-\"gravity planet enter -- --notty /usr/bin/kubectl --\"}\nHELM=\"gravity planet enter -- --notty /usr/bin/helm --\"\nCURRENT_STEP=init\nCURRENT_STEP_NBR=0\nSEP=\"Done.\\n\"\nLINE=\"\\n================================================\"\n\n# Defaults\nRTF_SERVICE_UID=${RTF_SERVICE_UID:-1000}\nRTF_SERVICE_GID=${RTF_SERVICE_GID:-1000}\nPOD_NETWORK_CIDR=${POD_NETWORK_CIDR:-10.244.0.0/16}\nSERVICE_CIDR=${SERVICE_CIDR:-10.100.0.0/16}\n\n# ADDITIONAL_ENV_VARS_PLACEHOLDER_DO_NOT_REMOVE\n\n# detect OS\ncase \"$(uname -s)\" in\n    Darwin*)\n      BASE64_DECODE_OPTS=\"-D\"\n      ;;\n    *)\n      BASE64_DECODE_OPTS=\"-d\"\nesac\n\nfunction on_exit {\n  local trap_code=$?\n  if [ $trap_code -ne 0 ] ; then\n    local ANCHOR=$(echo ${CURRENT_STEP} | tr \"_\" \"-\")\n    echo\n    echo \"***********************************************************\"\n    echo \"** Oh no! Your installation has stopped due to an error. **\"\n    echo \"***********************************************************\"\n    echo \"  1. Visit the troubleshooting guide for help:\"\n    echo \"     https://docs.mulesoft.com/runtime-fabric/latest/troubleshoot-guide#${ANCHOR}\"\n    echo\n    echo \"  2. Resume installation by running ${BASE_DIR}/init.sh\"\n    echo\n    echo \"Additional information: Error code: $trap_code; Step: ${CURRENT_STEP}; Line: ${TRAP_LINE:--};\"\n    echo\n\n  fi\n\n  echo -n $SCRIPT_VERSION \u003e $STATE_DIR/version\n}\n\nfunction on_error {\n    TRAP_LINE=$1\n}\n\ntrap 'on_error $LINENO' ERR\ntrap on_exit EXIT\n\nfunction run_step() {\n    CURRENT_STEP=$1\n    local DESCRIPTION=$2\n    (( CURRENT_STEP_NBR++ )) || true\n    echo\n    echo -e \"${CURRENT_STEP_NBR} / ${STEP_COUNT}: ${DESCRIPTION}${LINE}\"\n    if [ -f ${STATE_DIR}/${CURRENT_STEP} ]; then\n        echo ${SKIP_TEXT}\n        return 0\n    fi\n    eval ${CURRENT_STEP}\n    touch ${STATE_DIR}/${CURRENT_STEP}\n    echo -e ${SEP}\n}\n\nfunction simple_json_get () {\n    local prop=$1\n    local json=$2\n    local regex=\"\\\"$prop\\\":\\\"([^\\\"]+)\\\"\"\n\n    if [[ $json =~ $regex ]]; then\n        echo -n ${BASH_REMATCH[1]}\n    else\n        echo \"Error: Failed to extract json property: \\\"$prop\\\" from $json\"\n        exit 1\n    fi\n}\n\nfunction check_root_user() {\n    CURRENT_STEP=$FUNCNAME\n    if [[ $EUID -ne 0 ]]; then\n        echo \"Error: You are not running as root. Runtime Fabric requires elevated privileges to install.\"\n        return 1\n    fi\n}\n\nfunction load_environment {\n    CURRENT_STEP=$FUNCNAME\n    if [ -f $BASE_DIR/env ]; then\n        . $BASE_DIR/env\n    fi\n\n    if [ -z \"$RTF_HTTP_PROXY\" ]; then\n        RTF_HTTP_PROXY=${HTTP_PROXY:-}\n    fi\n\n    if [ -z \"$RTF_NO_PROXY\" ]; then\n        RTF_NO_PROXY=${NO_PROXY:-}\n    fi\n}\n\nfunction decode_activation_data() {\n    CURRENT_STEP=$FUNCNAME\n    if [ \"$RTF_ACTIVATION_DATA\" == \"skip\" ]; then\n        echo \"Skipped $CURRENT_STEP. RTF_ACTIVATION_DATA=skip.\"\n        return 0\n    fi\n    decoded=$(echo -n $RTF_ACTIVATION_DATA | base64 $BASE64_DECODE_OPTS)\n    RTF_ENDPOINT=$(echo $decoded | cut -d':' -f 1)\n    RTF_ACTIVATION_TOKEN=$(echo $decoded | cut -d':' -f 2)\n}\n\nfunction fetch_activation_properties() {\n    CURRENT_STEP=$FUNCNAME\n    if [ -z \"$RTF_ACTIVATION_TOKEN\" ]; then\n        echo \"Skipped $CURRENT_STEP. RTF_ACTIVATION_TOKEN not set.\"\n        return 0\n    fi\n    if [ -f $STATE_DIR/install_rtf_components ]; then\n        echo \"Skipped $CURRENT_STEP. Not installing RTF components.\"\n        return 0\n    fi\n    echo \"Fetching activation properties...\"\n\n    if [ ! -z $RTF_ENDPOINT ] \u0026\u0026 [[ $RTF_ENDPOINT != http* ]]; then\n        RTF_ENDPOINT=\"https://$RTF_ENDPOINT\"\n    fi\n\n    COUNT=0\n    while :\n    do\n        CODE=$($CURL_WITH_PROXY $CURL_OPTS -w \"%{http_code}\" $RTF_ENDPOINT/runtimefabric/api/activationData -H \"Authorization: $RTF_ACTIVATION_TOKEN\" -H \"Accept: application/json\" -o $ACTIVATION_PROPERTIES_FILE || true)\n        if [ \"$CODE\" == \"200\" ]; then\n            break\n        fi\n        let COUNT=COUNT+1\n        if [ $COUNT -ge 8 ]; then\n            echo \"Error: Failed to fetch $COUNT times, giving up.\"\n            exit 1\n        fi\n        echo \"Retrying in $((10 * $COUNT)) seconds...\"\n        sleep $((10 * $COUNT))\n    done\n\n    if [ -z \"$RTF_INSTALL_PACKAGE_URL\" ]; then\n        RTF_INSTALL_PACKAGE_URL=$(simple_json_get RTF_INSTALL_PACKAGE_URL `cat $ACTIVATION_PROPERTIES_FILE`)\n    fi\n\n    if [ ! -z $RTF_INSTALL_PACKAGE_URL ] \u0026\u0026 [[ $RTF_INSTALL_PACKAGE_URL != http* ]]; then\n        RTF_INSTALL_PACKAGE_URL=\"https://$RTF_INSTALL_PACKAGE_URL\"\n    fi\n\n    rm $ACTIVATION_PROPERTIES_FILE\n}\n\nfunction detect_properties() {\n    CURRENT_STEP=$FUNCNAME\n    if [ -z \"$RTF_PRIVATE_IP\" ]; then\n        echo \"RTF_PRIVATE_IP is not set, attempting to detect cloud provider\"\n\n        # Detect cloud provider by hitting instance metadata service. For azure, tags are converted to ENV_VARs\n        HTTP_CODE=$(curl $CURL_METADATA_OPTS -o /dev/null -w \"%{http_code}\" $AWS_METADATA_URL/ || true)\n        if [ $HTTP_CODE == 200 ]; then\n            echo \"Detected cloud provider: AWS\"\n            RTF_PRIVATE_IP=$(curl $CURL_METADATA_OPTS $AWS_METADATA_URL/local-ipv4)\n        else\n            HTTP_CODE=$(curl $CURL_METADATA_OPTS -o /dev/null -w \"%{http_code}\" -H$AZURE_METADATA_HEADER \"$AZURE_METADATA_URL/?api-version=$AZURE_METADATA_VERSION\" || true)\n            if [ $HTTP_CODE == 200 ]; then\n                echo \"Detected cloud provider: Azure\"\n                RTF_PRIVATE_IP=$(curl $CURL_METADATA_OPTS -H$AZURE_METADATA_HEADER \"$AZURE_METADATA_URL/network/interface/0/ipv4/ipAddress/0/privateIpAddress?api-version=$AZURE_METADATA_VERSION\u0026format=text\")\n                TAGS=$(curl $CURL_METADATA_OPTS -H$AZURE_METADATA_HEADER \"$AZURE_METADATA_URL/compute/tags?api-version=$AZURE_METADATA_VERSION\u0026format=text\")\n                IFS=';' read -ra TAG_ARRAY \u003c\u003c\u003c \"$TAGS\"\n                for i in \"${TAG_ARRAY[@]}\"; do\n                    IFS=':' read -ra THIS_TAG \u003c\u003c\u003c \"$i\"\n                    declare -g \"${THIS_TAG[0]}=${THIS_TAG[1]}\"\n                done\n            fi\n        fi\n    fi\n\n    if [ -z $RTF_HTTP_PROXY ]; then\n        CURL_WITH_PROXY=\"curl\"\n    else\n        CURL_WITH_PROXY=\"curl --proxy $RTF_HTTP_PROXY\"\n    fi\n\n    # Update NO_PROXY to make sure we bypass local addresses\n    export NO_PROXY=\"0.0.0.0/0,.local,${NO_PROXY}\"\n\n    return 0\n}\n\nfunction validate_properties() {\n    CURRENT_STEP=$FUNCNAME\n    echo \"Validating properties...\"\n    echo RTF_PRIVATE_IP: $RTF_PRIVATE_IP\n    echo RTF_NODE_ROLE: $RTF_NODE_ROLE\n    echo RTF_INSTALL_ROLE: $RTF_INSTALL_ROLE\n    echo RTF_DOCKER_DEVICE: $RTF_DOCKER_DEVICE\n    echo RTF_ETCD_DEVICE: $RTF_ETCD_DEVICE\n    echo RTF_DOCKER_DEVICE_SIZE: $RTF_DOCKER_DEVICE_SIZE\n    echo RTF_ETCD_DEVICE_SIZE: $RTF_ETCD_DEVICE_SIZE\n    echo RTF_HTTP_PROXY: $RTF_HTTP_PROXY\n    echo RTF_NO_PROXY: $RTF_NO_PROXY\n    echo HTTP_PROXY: $HTTP_PROXY\n    echo HTTPS_PROXY: $HTTPS_PROXY\n    echo NO_PROXY: $NO_PROXY\n    echo RTF_MONITORING_PROXY: $RTF_MONITORING_PROXY\n    echo RTF_SERVICE_UID: $RTF_SERVICE_UID\n    echo RTF_SERVICE_GID: $RTF_SERVICE_GID\n\n    [ -z \"$RTF_INSTALL_ROLE\" ] \u0026\u0026 echo \"Error: RTF_INSTALL_ROLE not set\" \u0026\u0026 exit 1\n    [ -z \"$RTF_NODE_ROLE\" ] \u0026\u0026 echo \"Error: RTF_NODE_ROLE not set\" \u0026\u0026 exit 1\n\n    # Install-leader properties\n    if [ $RTF_INSTALL_ROLE == \"leader\" ]; then\n        echo RTF_INSTALL_PACKAGE_URL: $RTF_INSTALL_PACKAGE_URL\n        echo RTF_TOKEN: $RTF_TOKEN\n        echo RTF_NAME: $RTF_NAME\n        # Registration properties\n        echo RTF_ACTIVATION_TOKEN: $RTF_ACTIVATION_TOKEN\n        echo RTF_MULE_LICENSE: ...$(echo $RTF_MULE_LICENSE | tail -c 10)\n        [ -z \"$RTF_NAME\" ] \u0026\u0026 echo \"Error: RTF_NAME not set\" \u0026\u0026 exit 1\n    else\n        echo RTF_INSTALLER_IP: $RTF_INSTALLER_IP\n        [ -z \"$RTF_INSTALLER_IP\" ] \u0026\u0026 echo \"Error: RTF_INSTALLER_IP\" \u0026\u0026 exit 1\n    fi\n\n    [ -z \"$RTF_PRIVATE_IP\" ] \u0026\u0026 echo \"Error: RTF_PRIVATE_IP not set\" \u0026\u0026 exit 1\n    [ -z \"$RTF_DOCKER_DEVICE\" ] \u0026\u0026 [ -z \"$RTF_DOCKER_DEVICE_SIZE\" ] \u0026\u0026 echo \"Error: RTF_DOCKER_DEVICE or RTF_DOCKER_DEVICE_SIZE must be set\" \u0026\u0026 exit 1\n    [ -z \"$RTF_TOKEN\" ] \u0026\u0026 echo \"Error: RTF_TOKEN not set\" \u0026\u0026 exit 1\n\n    if [ $RTF_NODE_ROLE == \"controller_node\" ] || [ $RTF_NODE_ROLE == \"general_node\" ]; then\n        [ -z \"$RTF_ETCD_DEVICE\" ] \u0026\u0026 [ -z \"$RTF_ETCD_DEVICE_SIZE\" ] \u0026\u0026 echo \"Error: RTF_ETCD_DEVICE or RTF_ETCD_DEVICE_SIZE must be set\" \u0026\u0026 exit 1\n    fi\n    return 0\n}\n\nfunction install_required_packages() {\n    #disable exit-on-error\n    set +e\n    rpm -q chrony\n    if [ $? != 0 ]; then\n        echo \"Installing chrony...\"\n        yum install -y chrony || true\n    fi\n\n    printf \"Checking chrony sync status...\"\n    COUNT=0\n    while :\n    do\n        chronyc tracking | grep -E 'Leap status\\s+:\\s+Normal'\n        if [ \"$?\" == \"0\" ]; then\n            echo \"[OK]\"\n            break\n        fi\n        let COUNT=COUNT+1\n        if [ $COUNT -ge \"3\" ]; then\n            echo \"Error: chrony sync check failed $COUNT times, giving up.\"\n            exit 1\n        fi\n        echo \"Retrying in 30 seconds...\"\n        sleep 30\n    done\n    # enable exit-on-error\n    set -e\n}\n\n\nfunction format_and_mount_disks() {\n\n    # if we specify the size, discover the disk from lsblk\n    if [ -n \"$RTF_DOCKER_DEVICE_SIZE\" ]; then\n        set +e\n        RTF_DOCKER_DEVICE=/dev/$(lsblk --inverse --nodeps --noheadings --output NAME,TYPE,SIZE | grep $RTF_DOCKER_DEVICE_SIZE | cut -d ' ' -f 1 | head -n1)\n        set -e\n        if [ \"$RTF_DOCKER_DEVICE\" == \"/dev/\" ]; then\n            echo \"Error: $RTF_DOCKER_DEVICE_SIZE docker disk not found\"\n            lsblk\n            exit 1\n        fi\n    else\n        # devices could be symlinks, resolve now\n        if [ -f $RTF_DOCKER_DEVICE ]; then\n            RTF_DOCKER_DEVICE=$(readlink -fe \"$RTF_DOCKER_DEVICE\")\n        fi\n        # ensure device is a real block device\n        echo \"Querying block devices for $RTF_DOCKER_DEVICE...\"\n        lsblk $RTF_DOCKER_DEVICE\n    fi\n\n    echo \"Initializing docker filesystem ($RTF_DOCKER_DEVICE)...\"\n    if [ -d \"$DOCKER_MOUNT\" ]; then\n        umount -l $DOCKER_MOUNT || true\n        rm -r $DOCKER_MOUNT\n    fi\n    mkfs.xfs -n ftype=1 -f $RTF_DOCKER_DEVICE\n    # get the UUID\n    RTF_DOCKER_DEVICE_UUID=$(blkid $RTF_DOCKER_DEVICE -ovalue | head -1)\n\n    sed -i.bak '/RTF/d' /etc/fstab\n    echo -e \"UUID=$RTF_DOCKER_DEVICE_UUID\\t$DOCKER_MOUNT\\txfs\\tdefaults,nofail\\t0\\t2\\t$FSTAB_COMMENT\" \u003e\u003e /etc/fstab\n\n    mkdir -p $DOCKER_MOUNT\n    mount $DOCKER_MOUNT\n    chown -R $RTF_SERVICE_UID:$RTF_SERVICE_GID $DOCKER_MOUNT\n\n    if [ \"$RTF_NODE_ROLE\" == \"controller_node\" ] || [ $RTF_NODE_ROLE == \"general_node\" ]; then\n\n        # if we specify the size, discover the disk from lsblk\n        if [ -n \"$RTF_ETCD_DEVICE_SIZE\" ]; then\n            set +e\n            RTF_ETCD_DEVICE=/dev/$(lsblk --inverse --nodeps --noheadings --output NAME,TYPE,SIZE | grep $RTF_ETCD_DEVICE_SIZE | cut -d ' ' -f 1 | head -n1)\n            set -e\n            if [ \"$RTF_ETCD_DEVICE\" == \"/dev/\" ]; then\n                echo \"Error: $RTF_ECTD_DEVICE_SIZE etcd disk not found\"\n                lsblk\n                exit 1\n            fi\n        else\n            # devices could be symlinks, resolve now\n            if [ -f $RTF_ETCD_DEVICE ]; then\n                RTF_ETCD_DEVICE=$(readlink -f \"$RTF_ETCD_DEVICE\")\n            fi\n            echo \"Querying block devices for $RTF_ETCD_DEVICE...\"\n            lsblk $RTF_ETCD_DEVICE\n        fi\n        echo \"Initializing etcd filesystem ($RTF_ETCD_DEVICE)...\"\n        if [ -d \"$ETCD_MOUNT\" ]; then\n            umount -l $ETCD_MOUNT || true\n            rm -r $ETCD_MOUNT\n        fi\n        mkfs.xfs -n ftype=1 -f $RTF_ETCD_DEVICE\n        # get the UUID\n        RTF_ETCD_DEVICE_UUID=$(blkid $RTF_ETCD_DEVICE -ovalue | head -1)\n        echo -e \"UUID=$RTF_ETCD_DEVICE_UUID\\t$ETCD_MOUNT\\txfs\\tdefaults,nofail\\t0\\t2\\t$FSTAB_COMMENT\" \u003e\u003e /etc/fstab\n        mkdir -p $ETCD_MOUNT\n        mount $ETCD_MOUNT\n        chown -R $RTF_SERVICE_UID:$RTF_SERVICE_GID $ETCD_MOUNT\n    fi\n}\n\nfunction configure_ip_tables() {\n    systemctl disable firewalld || true\n    systemctl stop firewalld || true\n\n    # Insert IP tables rules\n    echo -e '*filter\\n:INPUT ACCEPT [0:0]\\n:FORWARD ACCEPT [0:0]\\n:OUTPUT ACCEPT [0:0]\\n-A OUTPUT -o lo -j ACCEPT\\n-A OUTPUT -d 172.31.0.0/16 -p tcp -j ACCEPT\\n-A OUTPUT -d 172.31.0.0/16 -p udp -j ACCEPT\\n-A OUTPUT -d 10.0.0.0/8 -p tcp -j ACCEPT\\n-A OUTPUT -d 10.0.0.0/8 -p udp -j ACCEPT\\n-A OUTPUT -p tcp -m tcp ! --tcp-flags FIN,SYN,RST,ACK SYN -j ACCEPT\\n-A OUTPUT -p udp --dport 123 -j ACCEPT\\n-A INPUT -p udp --sport 123 -j ACCEPT\\nCOMMIT' \u003e /etc/rtf-iptables.rules\n    echo -e '[Unit]\\nDescription=Packet Filtering Framework\\n\\n[Service]\\nType=oneshot\\nExecStart=/usr/sbin/iptables-restore /etc/rtf-iptables.rules\\nExecReload=/usr/sbin/iptables-restore /etc/rtf-iptables.rules\\nRemainAfterExit=yes\\n\\n[Install]\\nWantedBy=multi-user.target' \u003e /etc/systemd/system/iptables.service\n}\n\nfunction configure_kernel_modules() {\n    modprobe br_netfilter || true\n    modprobe ebtable_filter || true\n    modprobe overlay || true\n    modprobe ip_tables || true\n    modprobe iptable_filter || true\n    modprobe iptable_nat || true\n\n    cat \u003e /etc/modules-load.d/telekube.conf \u003c\u003cEOF\nip_tables\niptable_nat\niptable_filter\nbr_netfilter\noverlay\nebtable_filter\nEOF\n\n    cat \u003e /etc/sysctl.d/50-telekube.conf \u003c\u003cEOF\nnet.ipv4.ip_forward=1\nnet.bridge.bridge-nf-call-iptables=1\nEOF\n\n    if sysctl -q fs.may_detach_mounts \u003e/dev/null 2\u003e\u00261; then\n      echo \"fs.may_detach_mounts=1\" \u003e\u003e /etc/sysctl.d/50-telekube.conf\n    fi\n\n    sysctl -p /etc/sysctl.d/50-telekube.conf\n}\n\nfunction start_system_services() {\n    systemctl --system daemon-reload\n    systemctl enable iptables.service\n    systemctl enable chronyd\n    systemctl start iptables.service\n    systemctl start chronyd\n}\n\nfunction fetch_rtfctl() {\n    if [[ -z $RTF_ENDPOINT ]]; then\n        RTFCTL_URL=https://anypoint.mulesoft.com/runtimefabric/api/download/rtfctl/latest\n    else\n        RTFCTL_URL=${RTF_ENDPOINT}/runtimefabric/api/download/rtfctl/latest\n    fi\n\n    echo \"Fetching rtfctl ${RTFCTL_URL}...\"\n    $CURL_WITH_PROXY $CURL_OPTS -o rtfctl $RTFCTL_URL\n    chmod +x ./rtfctl\n}\n\nfunction add_cgroup_cleanup_job() {\n  source /etc/os-release\n  if [[ $VERSION_ID != 7* ]]; then\n    echo \"Skipped. Detected OS version: $VERSION_ID, not compatible.\"\n    return 0\n  fi\n\n  mkdir -p /var/lib/gravity/cron\n\n  cat \u003e /var/lib/gravity/cron/systemd_gc.sh \u003c\u003c\"EOF\"\n#!/bin/bash\n\necho \"$(date) - Starting systemd_gc job\"\n\ncount=0\nfor i in $(find /sys/fs/cgroup/ -name run-*.scope -type d -printf \"%f\\n\"); do\n  pod=$(systemctl list-units --type scope --state running $i | cat | sed -n 's/\\(.*\\)Kubernetes transient mount for \\/var\\/lib\\/kubelet\\/pods\\/\\(.*\\)\\/volumes\\(.*\\)/\\2/p')\n  if [ ! -f \"/var/lib/kubelet/pods/'$pod'\" ]; then\n    echo -n \"Trying to stop '$i' systemd scope... \"\n    systemctl stop $i\n    echo \"Stopped.\"\n    count=$((count + 1))\n  fi\ndone\n\necho \"Total ${count} systemd scope stopped.\"\necho \"$(date) - Completed systemd_gc job\"\nEOF\n\n  chmod +x /var/lib/gravity/cron/systemd_gc.sh\n\n  ADD_CRON_JOB_CMD=\"cat \u003e /etc/cron.d/systemd_gc \u003c\u003cEOF\nSHELL=/bin/bash\n\n# Can be updated to a different time: 0-59 0-23 * * *\n$(shuf -i 0-59 -n 1) 0 * * * root  /var/lib/gravity/cron/systemd_gc.sh \u003e\u003e /var/lib/gravity/cron/systemd_gc.log 2\u003e\u00261\nEOF\"\n\n  $GRAVITY_BASH \"$ADD_CRON_JOB_CMD\"\n\n  cat \u003e /etc/logrotate.d/systemd_gc \u003c\u003cEOF\n/var/lib/gravity/cron/systemd_gc.log {\n  daily\n  size 10M\n  missingok\n  notifempty\n  rotate 1\n}\nEOF\n\n  $GRAVITY_BASH \"/var/lib/gravity/cron/systemd_gc.sh\"\n\n  echo \"Added cgroup cleanup job.\"\n}\n\nfunction fetch_install_package() {\n    if [[ ! -z $RTF_INSTALL_PACKAGE_URL ]]; then\n        echo \"Fetching installation package \\\"$RTF_INSTALL_PACKAGE_URL\\\"...\"\n        $CURL_WITH_PROXY $CURL_OPTS $RTF_INSTALL_PACKAGE_URL -o installer.tar.gz\n    else\n        until [ -f $BASE_DIR/installer.tar.gz ]; do\n            echo \"Waiting for installation package at $BASE_DIR/installer.tar.gz...\"\n            sleep 15\n        done\n    fi\n\n    if [ ! -f $BASE_DIR/installer.tar.gz ]; then\n        echo \"Error: failed to fetch installation package. Exiting.\"\n        exit 1\n    fi\n}\n\nfunction install_cluster() {\n    echo \"Extracting installer package...\"\n    mkdir -p installer\n    tar -zxf installer.tar.gz -C installer\n    cd installer\n\n    GRAVITY_VERSION=$(./gravity version | grep \"^Version:\" | awk '{ print $2 }')\n    if [[ ${GRAVITY_VERSION} != \"5.2\"* ]] \u0026\u0026 [ -n \"${RTF_HTTP_PROXY}\" ]; then\n        cat \u003e ../runtime_environment.yaml \u003c\u003cEOF\nkind: RuntimeEnvironment\nversion: v1\nspec:\n  data:\n    HTTP_PROXY: \"${RTF_HTTP_PROXY}\"\n    http_proxy: \"${RTF_HTTP_PROXY}\"\n    HTTPS_PROXY: \"${RTF_HTTP_PROXY}\"\n    NO_PROXY: \"${SYSTEM_NO_PROXY},${RTF_NO_PROXY}\"\nEOF\n    local EXTRA_CONFIG=--config=../runtime_environment.yaml\n    fi\n\n    FLAVOR=dynamic\n    if [ $RTF_NODE_ROLE == \"general_node\" ]; then\n        FLAVOR=demo\n    fi\n\n    ./gravity install --advertise-addr=$RTF_PRIVATE_IP \\\n      --token=$RTF_TOKEN \\\n      --cluster=$RTF_NAME \\\n      --cloud-provider=generic \\\n      --flavor=$FLAVOR \\\n      --role=$RTF_NODE_ROLE \\\n      --pod-network-cidr=$POD_NETWORK_CIDR \\\n      --service-cidr=$SERVICE_CIDR \\\n      --service-uid=$RTF_SERVICE_UID \\\n      --service-gid=$RTF_SERVICE_GID \\\n      ${EXTRA_CONFIG}\n\n    if [ ! -f /usr/bin/gravity ]; then\n        echo \"Error: /usr/bin/gravity does not exist\"\n        exit 1\n    fi\n\n    # ensure we have completed the installation by inspecting our cluster-info cm\n    ${KUBECTL_CMD_PREFIX} get configmap cluster-info -nkube-system \u003e /dev/null\n\n    # load KUBECONFIG environment variable for rtfctl\n    set -o allexport; source /etc/environment; set +o allexport\n\n    cd $BASE_DIR\n}\n\nfunction inject_proxy_into_dockerd() {\n    if [ -z $RTF_HTTP_PROXY ]; then\n        echo \"Skipped. HTTP proxy not configured\"\n        return 0\n    fi\n    # we only need this for 5.2.* versions\n    if [[ ${GRAVITY_VERSION} != \"5.2\"* ]]; then\n        return 0\n    fi\n\n    echo \"Injecting HTTP proxy into Docker daemon...\"\n\n    DOCKER_PROXY_VARS_CMD=\"cat \u003e /etc/systemd/system/docker.service.d/http-proxy-vars.conf \u003c\u003cEOF\nHTTP_PROXY=$RTF_HTTP_PROXY\nHTTPS_PROXY=$RTF_HTTP_PROXY\nNO_PROXY=$SYSTEM_NO_PROXY,$RTF_NO_PROXY\nEOF\"\n    $GRAVITY_BASH \"$DOCKER_PROXY_VARS_CMD\"\n\n    # we use EnvironmentFile so that systemd can parse special characters in the proxy string\n    DOCKER_PROXY_CMD=\"cat \u003e /etc/systemd/system/docker.service.d/http-proxy.conf \u003c\u003cEOF\n[Service]\nEnvironmentFile=/etc/systemd/system/docker.service.d/http-proxy-vars.conf\nEOF\"\n    $GRAVITY_BASH \"$DOCKER_PROXY_CMD\"\n\n    gravity planet enter -- --notty  /usr/bin/systemctl -- daemon-reload\n    gravity planet enter -- --notty  /usr/bin/systemctl -- restart docker\n}\n\nfunction join_cluster() {\n    echo \"Joining cluster, waiting for installer node to complete...\"\n\n    # disable exit-on-error\n    set +e\n    until [ -f gravity ]; do\n        sleep 15\n        curl $CURL_OPTS https://$RTF_INSTALLER_IP:32009/telekube/gravity -o gravity\n    done\n    chmod +x gravity\n\n    # if we are setting the proxy, we must wait until the agent has installed, because it\n    # restarts dockerd on the leader and causes join to hang for v1.0.x installers\n    GRAVITY_VERSION=$(./gravity version | grep \"^Version:\" | awk '{ print $2 }')\n    if [[ ${GRAVITY_VERSION} == \"5.2\"* ]] \u0026\u0026 [ -n $RTF_HTTP_PROXY ]; then\n        until [ -f .rtf_installed_flag ]; do\n            sleep 15\n            curl $CURL_OPTS http://$RTF_INSTALLER_IP:30945/api/v1/status/info -o .rtf_installed_flag\n        done\n    fi\n\n    COUNT=0\n    while :\n    do\n        export GRAVITY_PEER_CONNECT_TIMEOUT=60m\n        ./gravity join $RTF_INSTALLER_IP --advertise-addr=$RTF_PRIVATE_IP --token=$RTF_TOKEN --cloud-provider=generic --role=$RTF_NODE_ROLE\n\n        if [ \"$?\" == \"0\" ]; then\n            if [ ! -f /usr/bin/gravity ]; then\n                echo \"Error: /usr/bin/gravity does not exist\"\n                exit 1\n            fi\n            break\n        fi\n\n        let COUNT=COUNT+1\n        if [ $COUNT -ge $JOINING_ATTEMPTS ]; then\n            echo \"Error: Failed to register $COUNT times, giving up.\"\n            exit 1\n        fi\n        echo \"Retrying joining the cluster in 30 seconds...\"\n        sleep 30\n    done\n\n    # enable exit-on-error\n    set -e\n}\n\nfunction create_rtf_namespace() {\n    ${KUBECTL_CMD_PREFIX} create ns rtf || true\n    ${KUBECTL_CMD_PREFIX} label ns rtf rtf.mulesoft.com/role=rtf || true\n}\n\nfunction install_rtf_components() {\n    if [ -z \"$RTF_ACTIVATION_TOKEN\" ]; then\n        echo \"Skipped. RTF_ACTIVATION_TOKEN not set.  Creating namespace only.\"\n        create_rtf_namespace\n        return 0\n    fi\n\n    if [ -z \"$RTF_AGENT_URL\" ]; then\n        HTTP_PROXY=\"$RTF_HTTP_PROXY\" MONITORING_PROXY=\"$RTF_MONITORING_PROXY\" ./rtfctl install ${RTF_ACTIVATION_DATA}\n    else\n        HTTP_PROXY=\"$RTF_HTTP_PROXY\" MONITORING_PROXY=\"$RTF_MONITORING_PROXY\" ./rtfctl install ${RTF_ACTIVATION_DATA} --helm-chart-location ${RTF_AGENT_URL}\n    fi\n}\n\nfunction wait_for_connectivity() {\n    ./rtfctl wait\n}\n\nfunction install_mule_license() {\n    if [ -z \"$RTF_MULE_LICENSE\" ]; then\n        echo \"Skipped. RTF_MULE_LICENSE not set\"\n        return 0\n    fi\n    echo \"Configuring Mule license...\"\n    ./rtfctl apply mule-license \"$RTF_MULE_LICENSE\"\n}\n\nfunction generate_ops_center_credentials() {\n    ADMIN_PASSWORD=\"$(env LC_CTYPE=C tr -dc 'a-zA-Z0-9' \u003c /dev/urandom | head -c50)\" || true\n    if [ -z \"$ADMIN_PASSWORD\" ]; then\n        echo \"Error: Failed to generate admin password\"\n        exit 1;\n    fi\n\n    set +e\n    OPCENTER_CMD=\"gravity planet enter -- --notty /usr/bin/gravity -- user create --type=admin --email=admin@runtime-fabric --password=$ADMIN_PASSWORD --ops-url=https://gravity-site.kube-system.svc.cluster.local:3009 --insecure\"\n\n    eval $OPCENTER_CMD\n    CMD_EXIT_CODE=$?\n\n    COUNT=1\n    until [ \"$CMD_EXIT_CODE\" == \"0\" ]; do\n        echo\n        echo \"Retrying OpsCenter credentials in 30 seconds...\"\n        sleep 30\n        eval $OPCENTER_CMD\n        CMD_EXIT_CODE=$?\n        let COUNT=COUNT+1\n        if [ $COUNT -ge 5 ]; then\n            echo \"Error: Failed to generate OpsCenter credentials $COUNT times, giving up.\"\n            exit 1\n        fi\n    done\n    # enable exit-on-error\n    set -e\n\n    echo \"Ops Center access:\"\n    echo \"URL:      https://$RTF_PRIVATE_IP:32009/web\"\n    echo \"User:     admin@runtime-fabric\"\n    echo \"Password: $ADMIN_PASSWORD\"\n}\n\nfunction set_inotify_limit() {\n    sysctl -w fs.inotify.max_user_watches=1048576\n    echo \"fs.inotify.max_user_watches=1048576\" \u003e /etc/sysctl.d/inotify.conf\n}\n\nfunction purge() {\n    echo \"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"\n    echo \"  WARNING: THIS WILL REMOVE ALL RUNTIME FABRIC COMPONENTS AND APPLICATIONS\"\n    echo \"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"\n    read -p \"Continue (y/n)? \" choice\n    case \"$choice\" in\n        y|Y )\n            echo \"Removing RTF components...\"\n            ${HELM} delete runtime-fabric --purge || true\n\n            ${KUBECTL_CMD_PREFIX} get secret custom-properties -nrtf --export -oyaml \u003e custom_properties.yaml\n            echo \"Removing applications...\"\n            gravity planet enter -- --notty /usr/bin/kubectl -- delete ns -l rtf.mulesoft.com/role || true\n            while [ true ]; do\n                NS_REMAINING=$(gravity planet enter -- --notty /usr/bin/kubectl -- get ns --no-headers --ignore-not-found -l rtf.mulesoft.com/role | wc -l)\n                if [ \"$NS_REMAINING\" == \"0\" ]; then\n                    break\n                fi\n                sleep 1\n                echo \"Waiting for $NS_REMAINING namespaces to be removed...\"\n            done\n            rm .state/install_rtf_components .state/install_mule_license .state/wait_for_connectivity .state/init-complete || true\n        ;;\n\n    n|N ) exit\n        ;;\n    * ) echo \"Unexpected response\";;\n  esac\n  echo\n  echo \"Purge complete.\"\n}\n\nfunction activate() {\n  if [ -z \"$1\" ]; then\n    echo \"Activation data is missing, use the following: ./init.sh activate '\u003cactivation data snippet\u003e'\"\n    exit\n  fi\n\n  load_environment\n  detect_properties\n  RTF_ACTIVATION_DATA=\"$1\"\n  decode_activation_data\n  fetch_activation_properties\n  validate_properties\n  create_rtf_namespace\n\n  # if we backed up custom-properties during purge, reapply it now\n  if [ -f custom_properties.yaml ]; then\n    cp custom_properties.yaml /var/lib/gravity/rtf_custom_properties.yaml\n    ${KUBECTL_CMD_PREFIX} apply -nrtf -f /var/lib/gravity/rtf_custom_properties.yaml\n  fi\n\n  install_rtf_components\n  exit\n}\n\nfunction reinstall() {\n    RTF_ENV=${RTF_ENV:-prod}\n\n    printf \"\\nAnypoint Platform environment: ${RTF_ENV}\\n\\n\"\n\n    # reinstall is only valid to run when we have runtime-fabric installed.\n    ${HELM} status runtime-fabric\n\n    # Clean up temp directory...\n    mkdir -p reinstall-data\n    rm -rf reinstall-data/*\n\n    echo \"Discovering current configuration...\"\n\n    if [ -z $RTF_VERSION ]; then\n        RTF_VERSION=$(${KUBECTL_CMD_PREFIX} get deployment deployer -nrtf -o jsonpath=\"{.spec.template.spec.containers[0].image}\" | cut -d: -f 2 | cut -dv -f 2)\n    fi\n    echo \" - version: ${RTF_VERSION}\"\n\n    AWS_ACCESS_KEY_ID=$(${KUBECTL_CMD_PREFIX} get secret registry-creds -nrtf -ojsonpath=\"{.data.AWS_ACCESS_KEY_ID}\" | base64 -d)\n    AWS_SECRET_ACCESS_KEY=$(${KUBECTL_CMD_PREFIX} get secret registry-creds -nrtf -ojsonpath=\"{.data.AWS_SECRET_ACCESS_KEY}\" | base64 -d)\n    AWS_DEFAULT_REGION=$(${KUBECTL_CMD_PREFIX} get secret registry-creds -nrtf -ojsonpath=\"{.data.AWS_REGION}\" | base64 -d)\n\n    ${HELM} get values runtime-fabric \u003e reinstall-data/values.yaml\n\n    echo\n    echo \"Fetching RTF installation package...\"\n    awsFile=\"rtf-agent-${RTF_VERSION}.tgz\"\n    bucket=\"worker-cloud-helm-${RTF_ENV}\"\n    resource=\"/${bucket}/${awsFile}\"\n    contentType=\"application/x-compressed-tar\"\n    dateValue=`TZ=GMT date -R`\n    stringToSign=\"GET\\n\\n${contentType}\\n${dateValue}\\n${resource}\"\n    signature=`echo -en ${stringToSign} | openssl sha1 -hmac ${AWS_SECRET_ACCESS_KEY} -binary | base64`\n    curl --fail -H \"Host: ${bucket}.s3.amazonaws.com\" \\\n         -H \"Date: ${dateValue}\" \\\n         -H \"Content-Type: ${contentType}\" \\\n         -H \"Authorization: AWS ${AWS_ACCESS_KEY_ID}:${signature}\" \\\n         https://${bucket}.s3.amazonaws.com/${awsFile} -o reinstall-data/rtf-agent.tgz\n\n    cp -r reinstall-data /var/lib/gravity\n\n    echo\n    echo \"Removing current configuration...\"\n    ${HELM} delete --purge runtime-fabric\n\n    # reinstall\n    ${HELM} install /var/lib/gravity/reinstall-data/rtf-agent.tgz --name runtime-fabric --namespace rtf --wait -f /var/lib/gravity/reinstall-data/values.yaml\n    rm -rf /var/lib/gravity/reinstall-data\n}\n\n\n\n##########################################\n# Entrypoint\n##########################################\n\n# Also log output to file\nexec \u003e\u0026 \u003e(tee -a \"$REDIRECT_LOG\")\n\ncheck_root_user\n\nmkdir -p $BASE_DIR\nmkdir -p $STATE_DIR\n\nSCRIPT_DIR=$(realpath $BASH_SOURCE)\nif [[ $SCRIPT_DIR != ${BASE_DIR}* ]]; then\n   cp $BASH_SOURCE $BASE_DIR/init.sh || true\nfi\n\ncd $BASE_DIR\n\nif [ \"$1\" == \"purge\" ]; then\n    purge\n    exit\nelif [ \"$1\" == \"activate\" ]; then\n    activate \"$2\"\n    exit\nelif [ \"$1\" == \"reinstall-components\" ]; then\n    reinstall\n    exit\nelif [ \"$1\" == \"configure-system\" ]; then\n    STEP_COUNT=3\n    run_step set_inotify_limit \"Set inotify watch limits\"\n    run_step add_cgroup_cleanup_job \"Add cgroup cleanup job\"\n    run_step start_system_services \"Start system services\"\n    exit\nelif [ \"$1\" != \"\" ]; then\n    echo \"Invalid command: $1\"\n    exit 1\nfi\n\necho \"Runtime Fabric installation, version: $SCRIPT_VERSION\"\necho\n\necho -e \"Detecting properties...\"\nload_environment\ndetect_properties\ndecode_activation_data\nfetch_activation_properties\nvalidate_properties\n\nif [ \"$RTF_INSTALL_ROLE\" == \"leader\" ]; then\n    STEP_COUNT=15\nelse\n    STEP_COUNT=10\nfi\n\n# Cluster Setup\nrun_step install_required_packages \"Install required packages\"\nrun_step format_and_mount_disks \"Format and mount disks\"\nrun_step configure_ip_tables \"Configure IP tables rules\"\nrun_step configure_kernel_modules \"Enable kernel modules\"\nrun_step set_inotify_limit \"Set inotify watch limits\"\nrun_step start_system_services \"Start system services\"\nrun_step fetch_rtfctl \"Fetch rtfctl tool\"\nif [ \"$RTF_INSTALL_ROLE\" == \"leader\" ]; then\n    run_step fetch_install_package \"Fetch installation package\"\n    run_step install_cluster \"Create cluster\"\n    run_step generate_ops_center_credentials \"Generate Ops Center credentials\"\nelse\n    run_step join_cluster \"Join cluster\"\nfi\nrun_step inject_proxy_into_dockerd \"Configure dockerd proxy\"\nrun_step add_cgroup_cleanup_job \"Add cgroup cleanup job\"\n\n# RTF Setup\nif [ \"$RTF_INSTALL_ROLE\" == \"leader\" ]; then\n    run_step install_rtf_components \"Install RTF components\"\n    run_step install_mule_license \"Install Mule license\"\n    run_step wait_for_connectivity \"Wait for connectivity\"\nfi\n\necho -e \"Runtime Fabric installation complete.\"\ntouch $STATE_DIR/init-complete\n",
                "content_type": "text/x-shellscript",
                "filename": "init.sh",
                "merge_type": ""
              }
            ],
            "rendered": ""
          }
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_cloudinit_config",
      "name": "worker",
      "provider": "provider.template",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "base64_encode": true,
            "gzip": true,
            "id": "2194560509",
            "part": [
              {
                "content": "#!/bin/bash\n\nmkdir -p /opt/anypoint/runtimefabric\ncat \u003e\u003e /opt/anypoint/runtimefabric/env \u003c\u003cEOF\nRTF_NODE_ROLE=worker_node\nRTF_INSTALL_ROLE=joiner\nRTF_DOCKER_DEVICE_SIZE=250G\nRTF_TOKEN=\"sOH0xEcUA1x7tpbZ\"\nRTF_INSTALLER_IP=\"192.168.61.116\"\nRTF_HTTP_PROXY=''\nRTF_NO_PROXY=''\nRTF_SERVICE_UID=''\nRTF_SERVICE_GID=''\nEOF\n",
                "content_type": "text/x-shellscript",
                "filename": "envvars.sh",
                "merge_type": ""
              },
              {
                "content": "#!/bin/bash\nset -eo pipefail\n\n# Constants\nSCRIPT_VERSION='20200117-a53e64e'\nREDIRECT_LOG=/var/log/rtf-init.log\nFSTAB_COMMENT=\"# Added by RTF\"\nBASE_DIR=/opt/anypoint/runtimefabric\nSTATE_DIR=$BASE_DIR/.state\nSKIP_TEXT=\"Skipped. Already executed.\"\nMETADATA_IP=169.254.169.254\nCURL_OPTS=\"-L -k -sS --fail --connect-timeout 10 --retry 5 --retry-delay 15\"\nCURL_METADATA_OPTS=\"${CURL_OPTS} --noproxy ${METADATA_IP}\"\nAWS_METADATA_URL=http://$METADATA_IP/latest/meta-data\nAZURE_METADATA_HEADER=\"Metadata:true\"\nAZURE_METADATA_URL=http://$METADATA_IP/metadata/instance\nAZURE_METADATA_VERSION=2017-08-01\nDOCKER_MOUNT=/var/lib/gravity\nETCD_MOUNT=/var/lib/gravity/planet/etcd\nREGISTRATION_ATTEMPTS=5\nJOINING_ATTEMPTS=10\nGRAVITY_BASH=\"gravity planet enter -- --notty /usr/bin/bash -- -c\"\nSYSTEM_NO_PROXY=\"kubernetes.default.svc,.local,0.0.0.0/0\"\nACTIVATION_PROPERTIES_FILE=activation-properties.json\nKUBECTL_CMD_PREFIX=${KUBECTL_CMD_PREFIX:-\"gravity planet enter -- --notty /usr/bin/kubectl --\"}\nHELM=\"gravity planet enter -- --notty /usr/bin/helm --\"\nCURRENT_STEP=init\nCURRENT_STEP_NBR=0\nSEP=\"Done.\\n\"\nLINE=\"\\n================================================\"\n\n# Defaults\nRTF_SERVICE_UID=${RTF_SERVICE_UID:-1000}\nRTF_SERVICE_GID=${RTF_SERVICE_GID:-1000}\nPOD_NETWORK_CIDR=${POD_NETWORK_CIDR:-10.244.0.0/16}\nSERVICE_CIDR=${SERVICE_CIDR:-10.100.0.0/16}\n\n# ADDITIONAL_ENV_VARS_PLACEHOLDER_DO_NOT_REMOVE\n\n# detect OS\ncase \"$(uname -s)\" in\n    Darwin*)\n      BASE64_DECODE_OPTS=\"-D\"\n      ;;\n    *)\n      BASE64_DECODE_OPTS=\"-d\"\nesac\n\nfunction on_exit {\n  local trap_code=$?\n  if [ $trap_code -ne 0 ] ; then\n    local ANCHOR=$(echo ${CURRENT_STEP} | tr \"_\" \"-\")\n    echo\n    echo \"***********************************************************\"\n    echo \"** Oh no! Your installation has stopped due to an error. **\"\n    echo \"***********************************************************\"\n    echo \"  1. Visit the troubleshooting guide for help:\"\n    echo \"     https://docs.mulesoft.com/runtime-fabric/latest/troubleshoot-guide#${ANCHOR}\"\n    echo\n    echo \"  2. Resume installation by running ${BASE_DIR}/init.sh\"\n    echo\n    echo \"Additional information: Error code: $trap_code; Step: ${CURRENT_STEP}; Line: ${TRAP_LINE:--};\"\n    echo\n\n  fi\n\n  echo -n $SCRIPT_VERSION \u003e $STATE_DIR/version\n}\n\nfunction on_error {\n    TRAP_LINE=$1\n}\n\ntrap 'on_error $LINENO' ERR\ntrap on_exit EXIT\n\nfunction run_step() {\n    CURRENT_STEP=$1\n    local DESCRIPTION=$2\n    (( CURRENT_STEP_NBR++ )) || true\n    echo\n    echo -e \"${CURRENT_STEP_NBR} / ${STEP_COUNT}: ${DESCRIPTION}${LINE}\"\n    if [ -f ${STATE_DIR}/${CURRENT_STEP} ]; then\n        echo ${SKIP_TEXT}\n        return 0\n    fi\n    eval ${CURRENT_STEP}\n    touch ${STATE_DIR}/${CURRENT_STEP}\n    echo -e ${SEP}\n}\n\nfunction simple_json_get () {\n    local prop=$1\n    local json=$2\n    local regex=\"\\\"$prop\\\":\\\"([^\\\"]+)\\\"\"\n\n    if [[ $json =~ $regex ]]; then\n        echo -n ${BASH_REMATCH[1]}\n    else\n        echo \"Error: Failed to extract json property: \\\"$prop\\\" from $json\"\n        exit 1\n    fi\n}\n\nfunction check_root_user() {\n    CURRENT_STEP=$FUNCNAME\n    if [[ $EUID -ne 0 ]]; then\n        echo \"Error: You are not running as root. Runtime Fabric requires elevated privileges to install.\"\n        return 1\n    fi\n}\n\nfunction load_environment {\n    CURRENT_STEP=$FUNCNAME\n    if [ -f $BASE_DIR/env ]; then\n        . $BASE_DIR/env\n    fi\n\n    if [ -z \"$RTF_HTTP_PROXY\" ]; then\n        RTF_HTTP_PROXY=${HTTP_PROXY:-}\n    fi\n\n    if [ -z \"$RTF_NO_PROXY\" ]; then\n        RTF_NO_PROXY=${NO_PROXY:-}\n    fi\n}\n\nfunction decode_activation_data() {\n    CURRENT_STEP=$FUNCNAME\n    if [ \"$RTF_ACTIVATION_DATA\" == \"skip\" ]; then\n        echo \"Skipped $CURRENT_STEP. RTF_ACTIVATION_DATA=skip.\"\n        return 0\n    fi\n    decoded=$(echo -n $RTF_ACTIVATION_DATA | base64 $BASE64_DECODE_OPTS)\n    RTF_ENDPOINT=$(echo $decoded | cut -d':' -f 1)\n    RTF_ACTIVATION_TOKEN=$(echo $decoded | cut -d':' -f 2)\n}\n\nfunction fetch_activation_properties() {\n    CURRENT_STEP=$FUNCNAME\n    if [ -z \"$RTF_ACTIVATION_TOKEN\" ]; then\n        echo \"Skipped $CURRENT_STEP. RTF_ACTIVATION_TOKEN not set.\"\n        return 0\n    fi\n    if [ -f $STATE_DIR/install_rtf_components ]; then\n        echo \"Skipped $CURRENT_STEP. Not installing RTF components.\"\n        return 0\n    fi\n    echo \"Fetching activation properties...\"\n\n    if [ ! -z $RTF_ENDPOINT ] \u0026\u0026 [[ $RTF_ENDPOINT != http* ]]; then\n        RTF_ENDPOINT=\"https://$RTF_ENDPOINT\"\n    fi\n\n    COUNT=0\n    while :\n    do\n        CODE=$($CURL_WITH_PROXY $CURL_OPTS -w \"%{http_code}\" $RTF_ENDPOINT/runtimefabric/api/activationData -H \"Authorization: $RTF_ACTIVATION_TOKEN\" -H \"Accept: application/json\" -o $ACTIVATION_PROPERTIES_FILE || true)\n        if [ \"$CODE\" == \"200\" ]; then\n            break\n        fi\n        let COUNT=COUNT+1\n        if [ $COUNT -ge 8 ]; then\n            echo \"Error: Failed to fetch $COUNT times, giving up.\"\n            exit 1\n        fi\n        echo \"Retrying in $((10 * $COUNT)) seconds...\"\n        sleep $((10 * $COUNT))\n    done\n\n    if [ -z \"$RTF_INSTALL_PACKAGE_URL\" ]; then\n        RTF_INSTALL_PACKAGE_URL=$(simple_json_get RTF_INSTALL_PACKAGE_URL `cat $ACTIVATION_PROPERTIES_FILE`)\n    fi\n\n    if [ ! -z $RTF_INSTALL_PACKAGE_URL ] \u0026\u0026 [[ $RTF_INSTALL_PACKAGE_URL != http* ]]; then\n        RTF_INSTALL_PACKAGE_URL=\"https://$RTF_INSTALL_PACKAGE_URL\"\n    fi\n\n    rm $ACTIVATION_PROPERTIES_FILE\n}\n\nfunction detect_properties() {\n    CURRENT_STEP=$FUNCNAME\n    if [ -z \"$RTF_PRIVATE_IP\" ]; then\n        echo \"RTF_PRIVATE_IP is not set, attempting to detect cloud provider\"\n\n        # Detect cloud provider by hitting instance metadata service. For azure, tags are converted to ENV_VARs\n        HTTP_CODE=$(curl $CURL_METADATA_OPTS -o /dev/null -w \"%{http_code}\" $AWS_METADATA_URL/ || true)\n        if [ $HTTP_CODE == 200 ]; then\n            echo \"Detected cloud provider: AWS\"\n            RTF_PRIVATE_IP=$(curl $CURL_METADATA_OPTS $AWS_METADATA_URL/local-ipv4)\n        else\n            HTTP_CODE=$(curl $CURL_METADATA_OPTS -o /dev/null -w \"%{http_code}\" -H$AZURE_METADATA_HEADER \"$AZURE_METADATA_URL/?api-version=$AZURE_METADATA_VERSION\" || true)\n            if [ $HTTP_CODE == 200 ]; then\n                echo \"Detected cloud provider: Azure\"\n                RTF_PRIVATE_IP=$(curl $CURL_METADATA_OPTS -H$AZURE_METADATA_HEADER \"$AZURE_METADATA_URL/network/interface/0/ipv4/ipAddress/0/privateIpAddress?api-version=$AZURE_METADATA_VERSION\u0026format=text\")\n                TAGS=$(curl $CURL_METADATA_OPTS -H$AZURE_METADATA_HEADER \"$AZURE_METADATA_URL/compute/tags?api-version=$AZURE_METADATA_VERSION\u0026format=text\")\n                IFS=';' read -ra TAG_ARRAY \u003c\u003c\u003c \"$TAGS\"\n                for i in \"${TAG_ARRAY[@]}\"; do\n                    IFS=':' read -ra THIS_TAG \u003c\u003c\u003c \"$i\"\n                    declare -g \"${THIS_TAG[0]}=${THIS_TAG[1]}\"\n                done\n            fi\n        fi\n    fi\n\n    if [ -z $RTF_HTTP_PROXY ]; then\n        CURL_WITH_PROXY=\"curl\"\n    else\n        CURL_WITH_PROXY=\"curl --proxy $RTF_HTTP_PROXY\"\n    fi\n\n    # Update NO_PROXY to make sure we bypass local addresses\n    export NO_PROXY=\"0.0.0.0/0,.local,${NO_PROXY}\"\n\n    return 0\n}\n\nfunction validate_properties() {\n    CURRENT_STEP=$FUNCNAME\n    echo \"Validating properties...\"\n    echo RTF_PRIVATE_IP: $RTF_PRIVATE_IP\n    echo RTF_NODE_ROLE: $RTF_NODE_ROLE\n    echo RTF_INSTALL_ROLE: $RTF_INSTALL_ROLE\n    echo RTF_DOCKER_DEVICE: $RTF_DOCKER_DEVICE\n    echo RTF_ETCD_DEVICE: $RTF_ETCD_DEVICE\n    echo RTF_DOCKER_DEVICE_SIZE: $RTF_DOCKER_DEVICE_SIZE\n    echo RTF_ETCD_DEVICE_SIZE: $RTF_ETCD_DEVICE_SIZE\n    echo RTF_HTTP_PROXY: $RTF_HTTP_PROXY\n    echo RTF_NO_PROXY: $RTF_NO_PROXY\n    echo HTTP_PROXY: $HTTP_PROXY\n    echo HTTPS_PROXY: $HTTPS_PROXY\n    echo NO_PROXY: $NO_PROXY\n    echo RTF_MONITORING_PROXY: $RTF_MONITORING_PROXY\n    echo RTF_SERVICE_UID: $RTF_SERVICE_UID\n    echo RTF_SERVICE_GID: $RTF_SERVICE_GID\n\n    [ -z \"$RTF_INSTALL_ROLE\" ] \u0026\u0026 echo \"Error: RTF_INSTALL_ROLE not set\" \u0026\u0026 exit 1\n    [ -z \"$RTF_NODE_ROLE\" ] \u0026\u0026 echo \"Error: RTF_NODE_ROLE not set\" \u0026\u0026 exit 1\n\n    # Install-leader properties\n    if [ $RTF_INSTALL_ROLE == \"leader\" ]; then\n        echo RTF_INSTALL_PACKAGE_URL: $RTF_INSTALL_PACKAGE_URL\n        echo RTF_TOKEN: $RTF_TOKEN\n        echo RTF_NAME: $RTF_NAME\n        # Registration properties\n        echo RTF_ACTIVATION_TOKEN: $RTF_ACTIVATION_TOKEN\n        echo RTF_MULE_LICENSE: ...$(echo $RTF_MULE_LICENSE | tail -c 10)\n        [ -z \"$RTF_NAME\" ] \u0026\u0026 echo \"Error: RTF_NAME not set\" \u0026\u0026 exit 1\n    else\n        echo RTF_INSTALLER_IP: $RTF_INSTALLER_IP\n        [ -z \"$RTF_INSTALLER_IP\" ] \u0026\u0026 echo \"Error: RTF_INSTALLER_IP\" \u0026\u0026 exit 1\n    fi\n\n    [ -z \"$RTF_PRIVATE_IP\" ] \u0026\u0026 echo \"Error: RTF_PRIVATE_IP not set\" \u0026\u0026 exit 1\n    [ -z \"$RTF_DOCKER_DEVICE\" ] \u0026\u0026 [ -z \"$RTF_DOCKER_DEVICE_SIZE\" ] \u0026\u0026 echo \"Error: RTF_DOCKER_DEVICE or RTF_DOCKER_DEVICE_SIZE must be set\" \u0026\u0026 exit 1\n    [ -z \"$RTF_TOKEN\" ] \u0026\u0026 echo \"Error: RTF_TOKEN not set\" \u0026\u0026 exit 1\n\n    if [ $RTF_NODE_ROLE == \"controller_node\" ] || [ $RTF_NODE_ROLE == \"general_node\" ]; then\n        [ -z \"$RTF_ETCD_DEVICE\" ] \u0026\u0026 [ -z \"$RTF_ETCD_DEVICE_SIZE\" ] \u0026\u0026 echo \"Error: RTF_ETCD_DEVICE or RTF_ETCD_DEVICE_SIZE must be set\" \u0026\u0026 exit 1\n    fi\n    return 0\n}\n\nfunction install_required_packages() {\n    #disable exit-on-error\n    set +e\n    rpm -q chrony\n    if [ $? != 0 ]; then\n        echo \"Installing chrony...\"\n        yum install -y chrony || true\n    fi\n\n    printf \"Checking chrony sync status...\"\n    COUNT=0\n    while :\n    do\n        chronyc tracking | grep -E 'Leap status\\s+:\\s+Normal'\n        if [ \"$?\" == \"0\" ]; then\n            echo \"[OK]\"\n            break\n        fi\n        let COUNT=COUNT+1\n        if [ $COUNT -ge \"3\" ]; then\n            echo \"Error: chrony sync check failed $COUNT times, giving up.\"\n            exit 1\n        fi\n        echo \"Retrying in 30 seconds...\"\n        sleep 30\n    done\n    # enable exit-on-error\n    set -e\n}\n\n\nfunction format_and_mount_disks() {\n\n    # if we specify the size, discover the disk from lsblk\n    if [ -n \"$RTF_DOCKER_DEVICE_SIZE\" ]; then\n        set +e\n        RTF_DOCKER_DEVICE=/dev/$(lsblk --inverse --nodeps --noheadings --output NAME,TYPE,SIZE | grep $RTF_DOCKER_DEVICE_SIZE | cut -d ' ' -f 1 | head -n1)\n        set -e\n        if [ \"$RTF_DOCKER_DEVICE\" == \"/dev/\" ]; then\n            echo \"Error: $RTF_DOCKER_DEVICE_SIZE docker disk not found\"\n            lsblk\n            exit 1\n        fi\n    else\n        # devices could be symlinks, resolve now\n        if [ -f $RTF_DOCKER_DEVICE ]; then\n            RTF_DOCKER_DEVICE=$(readlink -fe \"$RTF_DOCKER_DEVICE\")\n        fi\n        # ensure device is a real block device\n        echo \"Querying block devices for $RTF_DOCKER_DEVICE...\"\n        lsblk $RTF_DOCKER_DEVICE\n    fi\n\n    echo \"Initializing docker filesystem ($RTF_DOCKER_DEVICE)...\"\n    if [ -d \"$DOCKER_MOUNT\" ]; then\n        umount -l $DOCKER_MOUNT || true\n        rm -r $DOCKER_MOUNT\n    fi\n    mkfs.xfs -n ftype=1 -f $RTF_DOCKER_DEVICE\n    # get the UUID\n    RTF_DOCKER_DEVICE_UUID=$(blkid $RTF_DOCKER_DEVICE -ovalue | head -1)\n\n    sed -i.bak '/RTF/d' /etc/fstab\n    echo -e \"UUID=$RTF_DOCKER_DEVICE_UUID\\t$DOCKER_MOUNT\\txfs\\tdefaults,nofail\\t0\\t2\\t$FSTAB_COMMENT\" \u003e\u003e /etc/fstab\n\n    mkdir -p $DOCKER_MOUNT\n    mount $DOCKER_MOUNT\n    chown -R $RTF_SERVICE_UID:$RTF_SERVICE_GID $DOCKER_MOUNT\n\n    if [ \"$RTF_NODE_ROLE\" == \"controller_node\" ] || [ $RTF_NODE_ROLE == \"general_node\" ]; then\n\n        # if we specify the size, discover the disk from lsblk\n        if [ -n \"$RTF_ETCD_DEVICE_SIZE\" ]; then\n            set +e\n            RTF_ETCD_DEVICE=/dev/$(lsblk --inverse --nodeps --noheadings --output NAME,TYPE,SIZE | grep $RTF_ETCD_DEVICE_SIZE | cut -d ' ' -f 1 | head -n1)\n            set -e\n            if [ \"$RTF_ETCD_DEVICE\" == \"/dev/\" ]; then\n                echo \"Error: $RTF_ECTD_DEVICE_SIZE etcd disk not found\"\n                lsblk\n                exit 1\n            fi\n        else\n            # devices could be symlinks, resolve now\n            if [ -f $RTF_ETCD_DEVICE ]; then\n                RTF_ETCD_DEVICE=$(readlink -f \"$RTF_ETCD_DEVICE\")\n            fi\n            echo \"Querying block devices for $RTF_ETCD_DEVICE...\"\n            lsblk $RTF_ETCD_DEVICE\n        fi\n        echo \"Initializing etcd filesystem ($RTF_ETCD_DEVICE)...\"\n        if [ -d \"$ETCD_MOUNT\" ]; then\n            umount -l $ETCD_MOUNT || true\n            rm -r $ETCD_MOUNT\n        fi\n        mkfs.xfs -n ftype=1 -f $RTF_ETCD_DEVICE\n        # get the UUID\n        RTF_ETCD_DEVICE_UUID=$(blkid $RTF_ETCD_DEVICE -ovalue | head -1)\n        echo -e \"UUID=$RTF_ETCD_DEVICE_UUID\\t$ETCD_MOUNT\\txfs\\tdefaults,nofail\\t0\\t2\\t$FSTAB_COMMENT\" \u003e\u003e /etc/fstab\n        mkdir -p $ETCD_MOUNT\n        mount $ETCD_MOUNT\n        chown -R $RTF_SERVICE_UID:$RTF_SERVICE_GID $ETCD_MOUNT\n    fi\n}\n\nfunction configure_ip_tables() {\n    systemctl disable firewalld || true\n    systemctl stop firewalld || true\n\n    # Insert IP tables rules\n    echo -e '*filter\\n:INPUT ACCEPT [0:0]\\n:FORWARD ACCEPT [0:0]\\n:OUTPUT ACCEPT [0:0]\\n-A OUTPUT -o lo -j ACCEPT\\n-A OUTPUT -d 172.31.0.0/16 -p tcp -j ACCEPT\\n-A OUTPUT -d 172.31.0.0/16 -p udp -j ACCEPT\\n-A OUTPUT -d 10.0.0.0/8 -p tcp -j ACCEPT\\n-A OUTPUT -d 10.0.0.0/8 -p udp -j ACCEPT\\n-A OUTPUT -p tcp -m tcp ! --tcp-flags FIN,SYN,RST,ACK SYN -j ACCEPT\\n-A OUTPUT -p udp --dport 123 -j ACCEPT\\n-A INPUT -p udp --sport 123 -j ACCEPT\\nCOMMIT' \u003e /etc/rtf-iptables.rules\n    echo -e '[Unit]\\nDescription=Packet Filtering Framework\\n\\n[Service]\\nType=oneshot\\nExecStart=/usr/sbin/iptables-restore /etc/rtf-iptables.rules\\nExecReload=/usr/sbin/iptables-restore /etc/rtf-iptables.rules\\nRemainAfterExit=yes\\n\\n[Install]\\nWantedBy=multi-user.target' \u003e /etc/systemd/system/iptables.service\n}\n\nfunction configure_kernel_modules() {\n    modprobe br_netfilter || true\n    modprobe ebtable_filter || true\n    modprobe overlay || true\n    modprobe ip_tables || true\n    modprobe iptable_filter || true\n    modprobe iptable_nat || true\n\n    cat \u003e /etc/modules-load.d/telekube.conf \u003c\u003cEOF\nip_tables\niptable_nat\niptable_filter\nbr_netfilter\noverlay\nebtable_filter\nEOF\n\n    cat \u003e /etc/sysctl.d/50-telekube.conf \u003c\u003cEOF\nnet.ipv4.ip_forward=1\nnet.bridge.bridge-nf-call-iptables=1\nEOF\n\n    if sysctl -q fs.may_detach_mounts \u003e/dev/null 2\u003e\u00261; then\n      echo \"fs.may_detach_mounts=1\" \u003e\u003e /etc/sysctl.d/50-telekube.conf\n    fi\n\n    sysctl -p /etc/sysctl.d/50-telekube.conf\n}\n\nfunction start_system_services() {\n    systemctl --system daemon-reload\n    systemctl enable iptables.service\n    systemctl enable chronyd\n    systemctl start iptables.service\n    systemctl start chronyd\n}\n\nfunction fetch_rtfctl() {\n    if [[ -z $RTF_ENDPOINT ]]; then\n        RTFCTL_URL=https://anypoint.mulesoft.com/runtimefabric/api/download/rtfctl/latest\n    else\n        RTFCTL_URL=${RTF_ENDPOINT}/runtimefabric/api/download/rtfctl/latest\n    fi\n\n    echo \"Fetching rtfctl ${RTFCTL_URL}...\"\n    $CURL_WITH_PROXY $CURL_OPTS -o rtfctl $RTFCTL_URL\n    chmod +x ./rtfctl\n}\n\nfunction add_cgroup_cleanup_job() {\n  source /etc/os-release\n  if [[ $VERSION_ID != 7* ]]; then\n    echo \"Skipped. Detected OS version: $VERSION_ID, not compatible.\"\n    return 0\n  fi\n\n  mkdir -p /var/lib/gravity/cron\n\n  cat \u003e /var/lib/gravity/cron/systemd_gc.sh \u003c\u003c\"EOF\"\n#!/bin/bash\n\necho \"$(date) - Starting systemd_gc job\"\n\ncount=0\nfor i in $(find /sys/fs/cgroup/ -name run-*.scope -type d -printf \"%f\\n\"); do\n  pod=$(systemctl list-units --type scope --state running $i | cat | sed -n 's/\\(.*\\)Kubernetes transient mount for \\/var\\/lib\\/kubelet\\/pods\\/\\(.*\\)\\/volumes\\(.*\\)/\\2/p')\n  if [ ! -f \"/var/lib/kubelet/pods/'$pod'\" ]; then\n    echo -n \"Trying to stop '$i' systemd scope... \"\n    systemctl stop $i\n    echo \"Stopped.\"\n    count=$((count + 1))\n  fi\ndone\n\necho \"Total ${count} systemd scope stopped.\"\necho \"$(date) - Completed systemd_gc job\"\nEOF\n\n  chmod +x /var/lib/gravity/cron/systemd_gc.sh\n\n  ADD_CRON_JOB_CMD=\"cat \u003e /etc/cron.d/systemd_gc \u003c\u003cEOF\nSHELL=/bin/bash\n\n# Can be updated to a different time: 0-59 0-23 * * *\n$(shuf -i 0-59 -n 1) 0 * * * root  /var/lib/gravity/cron/systemd_gc.sh \u003e\u003e /var/lib/gravity/cron/systemd_gc.log 2\u003e\u00261\nEOF\"\n\n  $GRAVITY_BASH \"$ADD_CRON_JOB_CMD\"\n\n  cat \u003e /etc/logrotate.d/systemd_gc \u003c\u003cEOF\n/var/lib/gravity/cron/systemd_gc.log {\n  daily\n  size 10M\n  missingok\n  notifempty\n  rotate 1\n}\nEOF\n\n  $GRAVITY_BASH \"/var/lib/gravity/cron/systemd_gc.sh\"\n\n  echo \"Added cgroup cleanup job.\"\n}\n\nfunction fetch_install_package() {\n    if [[ ! -z $RTF_INSTALL_PACKAGE_URL ]]; then\n        echo \"Fetching installation package \\\"$RTF_INSTALL_PACKAGE_URL\\\"...\"\n        $CURL_WITH_PROXY $CURL_OPTS $RTF_INSTALL_PACKAGE_URL -o installer.tar.gz\n    else\n        until [ -f $BASE_DIR/installer.tar.gz ]; do\n            echo \"Waiting for installation package at $BASE_DIR/installer.tar.gz...\"\n            sleep 15\n        done\n    fi\n\n    if [ ! -f $BASE_DIR/installer.tar.gz ]; then\n        echo \"Error: failed to fetch installation package. Exiting.\"\n        exit 1\n    fi\n}\n\nfunction install_cluster() {\n    echo \"Extracting installer package...\"\n    mkdir -p installer\n    tar -zxf installer.tar.gz -C installer\n    cd installer\n\n    GRAVITY_VERSION=$(./gravity version | grep \"^Version:\" | awk '{ print $2 }')\n    if [[ ${GRAVITY_VERSION} != \"5.2\"* ]] \u0026\u0026 [ -n \"${RTF_HTTP_PROXY}\" ]; then\n        cat \u003e ../runtime_environment.yaml \u003c\u003cEOF\nkind: RuntimeEnvironment\nversion: v1\nspec:\n  data:\n    HTTP_PROXY: \"${RTF_HTTP_PROXY}\"\n    http_proxy: \"${RTF_HTTP_PROXY}\"\n    HTTPS_PROXY: \"${RTF_HTTP_PROXY}\"\n    NO_PROXY: \"${SYSTEM_NO_PROXY},${RTF_NO_PROXY}\"\nEOF\n    local EXTRA_CONFIG=--config=../runtime_environment.yaml\n    fi\n\n    FLAVOR=dynamic\n    if [ $RTF_NODE_ROLE == \"general_node\" ]; then\n        FLAVOR=demo\n    fi\n\n    ./gravity install --advertise-addr=$RTF_PRIVATE_IP \\\n      --token=$RTF_TOKEN \\\n      --cluster=$RTF_NAME \\\n      --cloud-provider=generic \\\n      --flavor=$FLAVOR \\\n      --role=$RTF_NODE_ROLE \\\n      --pod-network-cidr=$POD_NETWORK_CIDR \\\n      --service-cidr=$SERVICE_CIDR \\\n      --service-uid=$RTF_SERVICE_UID \\\n      --service-gid=$RTF_SERVICE_GID \\\n      ${EXTRA_CONFIG}\n\n    if [ ! -f /usr/bin/gravity ]; then\n        echo \"Error: /usr/bin/gravity does not exist\"\n        exit 1\n    fi\n\n    # ensure we have completed the installation by inspecting our cluster-info cm\n    ${KUBECTL_CMD_PREFIX} get configmap cluster-info -nkube-system \u003e /dev/null\n\n    # load KUBECONFIG environment variable for rtfctl\n    set -o allexport; source /etc/environment; set +o allexport\n\n    cd $BASE_DIR\n}\n\nfunction inject_proxy_into_dockerd() {\n    if [ -z $RTF_HTTP_PROXY ]; then\n        echo \"Skipped. HTTP proxy not configured\"\n        return 0\n    fi\n    # we only need this for 5.2.* versions\n    if [[ ${GRAVITY_VERSION} != \"5.2\"* ]]; then\n        return 0\n    fi\n\n    echo \"Injecting HTTP proxy into Docker daemon...\"\n\n    DOCKER_PROXY_VARS_CMD=\"cat \u003e /etc/systemd/system/docker.service.d/http-proxy-vars.conf \u003c\u003cEOF\nHTTP_PROXY=$RTF_HTTP_PROXY\nHTTPS_PROXY=$RTF_HTTP_PROXY\nNO_PROXY=$SYSTEM_NO_PROXY,$RTF_NO_PROXY\nEOF\"\n    $GRAVITY_BASH \"$DOCKER_PROXY_VARS_CMD\"\n\n    # we use EnvironmentFile so that systemd can parse special characters in the proxy string\n    DOCKER_PROXY_CMD=\"cat \u003e /etc/systemd/system/docker.service.d/http-proxy.conf \u003c\u003cEOF\n[Service]\nEnvironmentFile=/etc/systemd/system/docker.service.d/http-proxy-vars.conf\nEOF\"\n    $GRAVITY_BASH \"$DOCKER_PROXY_CMD\"\n\n    gravity planet enter -- --notty  /usr/bin/systemctl -- daemon-reload\n    gravity planet enter -- --notty  /usr/bin/systemctl -- restart docker\n}\n\nfunction join_cluster() {\n    echo \"Joining cluster, waiting for installer node to complete...\"\n\n    # disable exit-on-error\n    set +e\n    until [ -f gravity ]; do\n        sleep 15\n        curl $CURL_OPTS https://$RTF_INSTALLER_IP:32009/telekube/gravity -o gravity\n    done\n    chmod +x gravity\n\n    # if we are setting the proxy, we must wait until the agent has installed, because it\n    # restarts dockerd on the leader and causes join to hang for v1.0.x installers\n    GRAVITY_VERSION=$(./gravity version | grep \"^Version:\" | awk '{ print $2 }')\n    if [[ ${GRAVITY_VERSION} == \"5.2\"* ]] \u0026\u0026 [ -n $RTF_HTTP_PROXY ]; then\n        until [ -f .rtf_installed_flag ]; do\n            sleep 15\n            curl $CURL_OPTS http://$RTF_INSTALLER_IP:30945/api/v1/status/info -o .rtf_installed_flag\n        done\n    fi\n\n    COUNT=0\n    while :\n    do\n        export GRAVITY_PEER_CONNECT_TIMEOUT=60m\n        ./gravity join $RTF_INSTALLER_IP --advertise-addr=$RTF_PRIVATE_IP --token=$RTF_TOKEN --cloud-provider=generic --role=$RTF_NODE_ROLE\n\n        if [ \"$?\" == \"0\" ]; then\n            if [ ! -f /usr/bin/gravity ]; then\n                echo \"Error: /usr/bin/gravity does not exist\"\n                exit 1\n            fi\n            break\n        fi\n\n        let COUNT=COUNT+1\n        if [ $COUNT -ge $JOINING_ATTEMPTS ]; then\n            echo \"Error: Failed to register $COUNT times, giving up.\"\n            exit 1\n        fi\n        echo \"Retrying joining the cluster in 30 seconds...\"\n        sleep 30\n    done\n\n    # enable exit-on-error\n    set -e\n}\n\nfunction create_rtf_namespace() {\n    ${KUBECTL_CMD_PREFIX} create ns rtf || true\n    ${KUBECTL_CMD_PREFIX} label ns rtf rtf.mulesoft.com/role=rtf || true\n}\n\nfunction install_rtf_components() {\n    if [ -z \"$RTF_ACTIVATION_TOKEN\" ]; then\n        echo \"Skipped. RTF_ACTIVATION_TOKEN not set.  Creating namespace only.\"\n        create_rtf_namespace\n        return 0\n    fi\n\n    if [ -z \"$RTF_AGENT_URL\" ]; then\n        HTTP_PROXY=\"$RTF_HTTP_PROXY\" MONITORING_PROXY=\"$RTF_MONITORING_PROXY\" ./rtfctl install ${RTF_ACTIVATION_DATA}\n    else\n        HTTP_PROXY=\"$RTF_HTTP_PROXY\" MONITORING_PROXY=\"$RTF_MONITORING_PROXY\" ./rtfctl install ${RTF_ACTIVATION_DATA} --helm-chart-location ${RTF_AGENT_URL}\n    fi\n}\n\nfunction wait_for_connectivity() {\n    ./rtfctl wait\n}\n\nfunction install_mule_license() {\n    if [ -z \"$RTF_MULE_LICENSE\" ]; then\n        echo \"Skipped. RTF_MULE_LICENSE not set\"\n        return 0\n    fi\n    echo \"Configuring Mule license...\"\n    ./rtfctl apply mule-license \"$RTF_MULE_LICENSE\"\n}\n\nfunction generate_ops_center_credentials() {\n    ADMIN_PASSWORD=\"$(env LC_CTYPE=C tr -dc 'a-zA-Z0-9' \u003c /dev/urandom | head -c50)\" || true\n    if [ -z \"$ADMIN_PASSWORD\" ]; then\n        echo \"Error: Failed to generate admin password\"\n        exit 1;\n    fi\n\n    set +e\n    OPCENTER_CMD=\"gravity planet enter -- --notty /usr/bin/gravity -- user create --type=admin --email=admin@runtime-fabric --password=$ADMIN_PASSWORD --ops-url=https://gravity-site.kube-system.svc.cluster.local:3009 --insecure\"\n\n    eval $OPCENTER_CMD\n    CMD_EXIT_CODE=$?\n\n    COUNT=1\n    until [ \"$CMD_EXIT_CODE\" == \"0\" ]; do\n        echo\n        echo \"Retrying OpsCenter credentials in 30 seconds...\"\n        sleep 30\n        eval $OPCENTER_CMD\n        CMD_EXIT_CODE=$?\n        let COUNT=COUNT+1\n        if [ $COUNT -ge 5 ]; then\n            echo \"Error: Failed to generate OpsCenter credentials $COUNT times, giving up.\"\n            exit 1\n        fi\n    done\n    # enable exit-on-error\n    set -e\n\n    echo \"Ops Center access:\"\n    echo \"URL:      https://$RTF_PRIVATE_IP:32009/web\"\n    echo \"User:     admin@runtime-fabric\"\n    echo \"Password: $ADMIN_PASSWORD\"\n}\n\nfunction set_inotify_limit() {\n    sysctl -w fs.inotify.max_user_watches=1048576\n    echo \"fs.inotify.max_user_watches=1048576\" \u003e /etc/sysctl.d/inotify.conf\n}\n\nfunction purge() {\n    echo \"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"\n    echo \"  WARNING: THIS WILL REMOVE ALL RUNTIME FABRIC COMPONENTS AND APPLICATIONS\"\n    echo \"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"\n    read -p \"Continue (y/n)? \" choice\n    case \"$choice\" in\n        y|Y )\n            echo \"Removing RTF components...\"\n            ${HELM} delete runtime-fabric --purge || true\n\n            ${KUBECTL_CMD_PREFIX} get secret custom-properties -nrtf --export -oyaml \u003e custom_properties.yaml\n            echo \"Removing applications...\"\n            gravity planet enter -- --notty /usr/bin/kubectl -- delete ns -l rtf.mulesoft.com/role || true\n            while [ true ]; do\n                NS_REMAINING=$(gravity planet enter -- --notty /usr/bin/kubectl -- get ns --no-headers --ignore-not-found -l rtf.mulesoft.com/role | wc -l)\n                if [ \"$NS_REMAINING\" == \"0\" ]; then\n                    break\n                fi\n                sleep 1\n                echo \"Waiting for $NS_REMAINING namespaces to be removed...\"\n            done\n            rm .state/install_rtf_components .state/install_mule_license .state/wait_for_connectivity .state/init-complete || true\n        ;;\n\n    n|N ) exit\n        ;;\n    * ) echo \"Unexpected response\";;\n  esac\n  echo\n  echo \"Purge complete.\"\n}\n\nfunction activate() {\n  if [ -z \"$1\" ]; then\n    echo \"Activation data is missing, use the following: ./init.sh activate '\u003cactivation data snippet\u003e'\"\n    exit\n  fi\n\n  load_environment\n  detect_properties\n  RTF_ACTIVATION_DATA=\"$1\"\n  decode_activation_data\n  fetch_activation_properties\n  validate_properties\n  create_rtf_namespace\n\n  # if we backed up custom-properties during purge, reapply it now\n  if [ -f custom_properties.yaml ]; then\n    cp custom_properties.yaml /var/lib/gravity/rtf_custom_properties.yaml\n    ${KUBECTL_CMD_PREFIX} apply -nrtf -f /var/lib/gravity/rtf_custom_properties.yaml\n  fi\n\n  install_rtf_components\n  exit\n}\n\nfunction reinstall() {\n    RTF_ENV=${RTF_ENV:-prod}\n\n    printf \"\\nAnypoint Platform environment: ${RTF_ENV}\\n\\n\"\n\n    # reinstall is only valid to run when we have runtime-fabric installed.\n    ${HELM} status runtime-fabric\n\n    # Clean up temp directory...\n    mkdir -p reinstall-data\n    rm -rf reinstall-data/*\n\n    echo \"Discovering current configuration...\"\n\n    if [ -z $RTF_VERSION ]; then\n        RTF_VERSION=$(${KUBECTL_CMD_PREFIX} get deployment deployer -nrtf -o jsonpath=\"{.spec.template.spec.containers[0].image}\" | cut -d: -f 2 | cut -dv -f 2)\n    fi\n    echo \" - version: ${RTF_VERSION}\"\n\n    AWS_ACCESS_KEY_ID=$(${KUBECTL_CMD_PREFIX} get secret registry-creds -nrtf -ojsonpath=\"{.data.AWS_ACCESS_KEY_ID}\" | base64 -d)\n    AWS_SECRET_ACCESS_KEY=$(${KUBECTL_CMD_PREFIX} get secret registry-creds -nrtf -ojsonpath=\"{.data.AWS_SECRET_ACCESS_KEY}\" | base64 -d)\n    AWS_DEFAULT_REGION=$(${KUBECTL_CMD_PREFIX} get secret registry-creds -nrtf -ojsonpath=\"{.data.AWS_REGION}\" | base64 -d)\n\n    ${HELM} get values runtime-fabric \u003e reinstall-data/values.yaml\n\n    echo\n    echo \"Fetching RTF installation package...\"\n    awsFile=\"rtf-agent-${RTF_VERSION}.tgz\"\n    bucket=\"worker-cloud-helm-${RTF_ENV}\"\n    resource=\"/${bucket}/${awsFile}\"\n    contentType=\"application/x-compressed-tar\"\n    dateValue=`TZ=GMT date -R`\n    stringToSign=\"GET\\n\\n${contentType}\\n${dateValue}\\n${resource}\"\n    signature=`echo -en ${stringToSign} | openssl sha1 -hmac ${AWS_SECRET_ACCESS_KEY} -binary | base64`\n    curl --fail -H \"Host: ${bucket}.s3.amazonaws.com\" \\\n         -H \"Date: ${dateValue}\" \\\n         -H \"Content-Type: ${contentType}\" \\\n         -H \"Authorization: AWS ${AWS_ACCESS_KEY_ID}:${signature}\" \\\n         https://${bucket}.s3.amazonaws.com/${awsFile} -o reinstall-data/rtf-agent.tgz\n\n    cp -r reinstall-data /var/lib/gravity\n\n    echo\n    echo \"Removing current configuration...\"\n    ${HELM} delete --purge runtime-fabric\n\n    # reinstall\n    ${HELM} install /var/lib/gravity/reinstall-data/rtf-agent.tgz --name runtime-fabric --namespace rtf --wait -f /var/lib/gravity/reinstall-data/values.yaml\n    rm -rf /var/lib/gravity/reinstall-data\n}\n\n\n\n##########################################\n# Entrypoint\n##########################################\n\n# Also log output to file\nexec \u003e\u0026 \u003e(tee -a \"$REDIRECT_LOG\")\n\ncheck_root_user\n\nmkdir -p $BASE_DIR\nmkdir -p $STATE_DIR\n\nSCRIPT_DIR=$(realpath $BASH_SOURCE)\nif [[ $SCRIPT_DIR != ${BASE_DIR}* ]]; then\n   cp $BASH_SOURCE $BASE_DIR/init.sh || true\nfi\n\ncd $BASE_DIR\n\nif [ \"$1\" == \"purge\" ]; then\n    purge\n    exit\nelif [ \"$1\" == \"activate\" ]; then\n    activate \"$2\"\n    exit\nelif [ \"$1\" == \"reinstall-components\" ]; then\n    reinstall\n    exit\nelif [ \"$1\" == \"configure-system\" ]; then\n    STEP_COUNT=3\n    run_step set_inotify_limit \"Set inotify watch limits\"\n    run_step add_cgroup_cleanup_job \"Add cgroup cleanup job\"\n    run_step start_system_services \"Start system services\"\n    exit\nelif [ \"$1\" != \"\" ]; then\n    echo \"Invalid command: $1\"\n    exit 1\nfi\n\necho \"Runtime Fabric installation, version: $SCRIPT_VERSION\"\necho\n\necho -e \"Detecting properties...\"\nload_environment\ndetect_properties\ndecode_activation_data\nfetch_activation_properties\nvalidate_properties\n\nif [ \"$RTF_INSTALL_ROLE\" == \"leader\" ]; then\n    STEP_COUNT=15\nelse\n    STEP_COUNT=10\nfi\n\n# Cluster Setup\nrun_step install_required_packages \"Install required packages\"\nrun_step format_and_mount_disks \"Format and mount disks\"\nrun_step configure_ip_tables \"Configure IP tables rules\"\nrun_step configure_kernel_modules \"Enable kernel modules\"\nrun_step set_inotify_limit \"Set inotify watch limits\"\nrun_step start_system_services \"Start system services\"\nrun_step fetch_rtfctl \"Fetch rtfctl tool\"\nif [ \"$RTF_INSTALL_ROLE\" == \"leader\" ]; then\n    run_step fetch_install_package \"Fetch installation package\"\n    run_step install_cluster \"Create cluster\"\n    run_step generate_ops_center_credentials \"Generate Ops Center credentials\"\nelse\n    run_step join_cluster \"Join cluster\"\nfi\nrun_step inject_proxy_into_dockerd \"Configure dockerd proxy\"\nrun_step add_cgroup_cleanup_job \"Add cgroup cleanup job\"\n\n# RTF Setup\nif [ \"$RTF_INSTALL_ROLE\" == \"leader\" ]; then\n    run_step install_rtf_components \"Install RTF components\"\n    run_step install_mule_license \"Install Mule license\"\n    run_step wait_for_connectivity \"Wait for connectivity\"\nfi\n\necho -e \"Runtime Fabric installation complete.\"\ntouch $STATE_DIR/init-complete\n",
                "content_type": "text/x-shellscript",
                "filename": "init.sh",
                "merge_type": ""
              }
            ],
            "rendered": ""
          }
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "controller_env",
      "provider": "provider.template",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "a67eb6b2536f06be3d6cc880345dbe695de6b2e1f6c261bdb5b53d387e43273f",
            "rendered": "#!/bin/bash\n\nmkdir -p /opt/anypoint/runtimefabric\ncat \u003e\u003e /opt/anypoint/runtimefabric/env \u003c\u003cEOF\nRTF_NODE_ROLE=controller_node\nRTF_INSTALL_ROLE=joiner\nRTF_ETCD_DEVICE_SIZE=60G\nRTF_DOCKER_DEVICE_SIZE=250G\nRTF_TOKEN=\"sOH0xEcUA1x7tpbZ\"\nRTF_INSTALLER_IP=\"192.168.61.116\"\nRTF_HTTP_PROXY=''\nRTF_NO_PROXY=''\nRTF_MONITORING_PROXY=''\nRTF_SERVICE_UID=''\nRTF_SERVICE_GID=''\nEOF\n",
            "template": "#!/bin/bash\n\nmkdir -p /opt/anypoint/runtimefabric\ncat \u003e\u003e /opt/anypoint/runtimefabric/env \u003c\u003cEOF\nRTF_NODE_ROLE=controller_node\nRTF_INSTALL_ROLE=joiner\nRTF_ETCD_DEVICE_SIZE=60G\nRTF_DOCKER_DEVICE_SIZE=250G\nRTF_TOKEN=\"${cluster_token}\"\nRTF_INSTALLER_IP=\"${installer_ip}\"\nRTF_HTTP_PROXY='${http_proxy}'\nRTF_NO_PROXY='${no_proxy}'\nRTF_MONITORING_PROXY='${monitoring_proxy}'\nRTF_SERVICE_UID='${service_uid}'\nRTF_SERVICE_GID='${service_gid}'\nEOF\n",
            "vars": {
              "cluster_name": "runtime-fabric",
              "cluster_token": "sOH0xEcUA1x7tpbZ",
              "http_proxy": "",
              "installer_ip": "192.168.61.116",
              "monitoring_proxy": "",
              "no_proxy": "",
              "service_gid": "",
              "service_uid": ""
            }
          }
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "inbound_traffic_controller_env",
      "provider": "provider.template",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "fa32f145bd6e90f078044b4f1d7e888898cdbd80ae00c457179715342f9ef8a9",
            "rendered": "#!/bin/bash\n\nmkdir -p /opt/anypoint/runtimefabric\ncat \u003e\u003e /opt/anypoint/runtimefabric/env \u003c\u003cEOF\nRTF_NODE_ROLE=dedicated_ingress_node\nRTF_INSTALL_ROLE=joiner\nRTF_DOCKER_DEVICE_SIZE=50G\nRTF_TOKEN=\"sOH0xEcUA1x7tpbZ\"\nRTF_INSTALLER_IP=\"192.168.61.116\"\nEOF\n",
            "template": "#!/bin/bash\n\nmkdir -p /opt/anypoint/runtimefabric\ncat \u003e\u003e /opt/anypoint/runtimefabric/env \u003c\u003cEOF\nRTF_NODE_ROLE=dedicated_ingress_node\nRTF_INSTALL_ROLE=joiner\nRTF_DOCKER_DEVICE_SIZE=50G\nRTF_TOKEN=\"${cluster_token}\"\nRTF_INSTALLER_IP=\"${installer_ip}\"\nEOF\n",
            "vars": {
              "cluster_name": "runtime-fabric",
              "cluster_token": "sOH0xEcUA1x7tpbZ",
              "installer_ip": "192.168.61.116"
            }
          }
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "installer_env",
      "provider": "provider.template",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "ccdec0c5b2696df96fbaeec7e7306900509f5bbbc415ac93ce963cc41026b405",
            "rendered": "#!/bin/bash\n\nmkdir -p /opt/anypoint/runtimefabric\ncat \u003e\u003e /opt/anypoint/runtimefabric/env \u003c\u003cEOF\nRTF_NODE_ROLE=controller_node\nRTF_INSTALL_ROLE=leader\nRTF_INSTALL_PACKAGE_URL=\"\"\nRTF_ETCD_DEVICE_SIZE=60G\nRTF_DOCKER_DEVICE_SIZE=250G\nRTF_TOKEN=\"sOH0xEcUA1x7tpbZ\"\nRTF_NAME=\"runtime-fabric\"\nRTF_ACTIVATION_DATA=\"YW55cG9pbnQubXVsZXNvZnQuY29tOjdmZDk0OGE5LWMwNGEtNDJiYi1iMTFhLTAyZTNkOWJmMDc0Mw==\"\nRTF_ORG_ID=\"\"\nRTF_REGION=\"us-east-1\"\nRTF_ENDPOINT=\"https://anypoint.mulesoft.com\"\nRTF_AUTH_TOKEN=\"\"\nRTF_MULE_LICENSE='2+W35iUhD9n6UzfSh144qHKlIsjMqSBw/YescXleQkGpfhLfKc4CGYnihgQo/6fKMpYrSCvCybcFkM7GspNi+aVJDAvpGyyfkpeNWx7x0ygE3eFPipCTZ/r/dTOTC8IrpGwcc6bHn1eneO9PMPQrLkqxS6GAbumpGMgoJe23ttaRz94FvcKxkq5IjGQiqnY/U7cKnnwFtK0A+7XiU5J5ROYrBIZPW6QEa31RPdummqQib3eAKn+mBubzLeTsIYcP28ne4T37A1OILlyGtDCML/Jfe/nMfncRzZx6lnuJvz5jlBqaRKSKa3Y6/aySAmOYa1KHWVbVeys8lOi5qbJS3qAzTzP40coX9XBwGo3iHx25NLqtL9b50/4vAOkAfbwSJegaKNJIrhz1dRomVEXBpForc+K9obSIt9FU8uH2HDlNfcytk/GeU2dglfcldrFCYnBYoWHvGcTAHMBxpt8XAu6UWKJs6NVTxHd98ZGDs4W0LHHqHDJUqn+sNMKKSdeTzwEzdMgGsxsYfEv6OUSgOrWMYOngpKDpchMt0ISgVpeNFo2XSCrjnA8cKx9uZ+UbD/d5zYRlU69OmPAUCNNvWNWMcptARZhbM9x+aNfixuOXmQuQUCCo6ln3X9HxTEsYTb6tLk280E9k0atMdddYjZIvhc1uuu1n3iDUgLxypMNtl8S0O4KH/iZ3Z4c6SB8VmaZxI+SHay8FIS9bttbhpLMlGQO1fxn8GH8og1D5ptYQpYhjctkCIHRADlUZ5oo9ZcO415gcn8kTYXa8gMK1Jn/YCNghMU9EFOWHHisCMwa9vdh1YFmTQLJWDklV0OoUHrze0C3csxSY2BlhVWRNceTogY2vQXa8rasxsM9Lz2dy1kGrkhxxNyT4z0YfEvIfCXFVN2csD1QeeKaFwFn6V2k+pxm5PwhOfABQJ9AqJWQ502rzNxXnFDu9yeRyykShA64ZsPrqZyD7KGe3zfj9qGawK+WJJR'\nRTF_HTTP_PROXY=''\nRTF_NO_PROXY=''\nRTF_MONITORING_PROXY=''\nRTF_SERVICE_UID=''\nRTF_SERVICE_GID=''\nRTF_AGENT_URL=''\nPOD_NETWORK_CIDR='10.244.0.0/16'\nSERVICE_CIDR='10.100.0.0/16'\nEOF\n",
            "template": "#!/bin/bash\n\nmkdir -p /opt/anypoint/runtimefabric\ncat \u003e\u003e /opt/anypoint/runtimefabric/env \u003c\u003cEOF\nRTF_NODE_ROLE=controller_node\nRTF_INSTALL_ROLE=leader\nRTF_INSTALL_PACKAGE_URL=\"${installer_url}\"\nRTF_ETCD_DEVICE_SIZE=60G\nRTF_DOCKER_DEVICE_SIZE=250G\nRTF_TOKEN=\"${cluster_token}\"\nRTF_NAME=\"${cluster_name}\"\nRTF_ACTIVATION_DATA=\"${activation_data}\"\nRTF_ORG_ID=\"${org_id}\"\nRTF_REGION=\"${region}\"\nRTF_ENDPOINT=\"${endpoint}\"\nRTF_AUTH_TOKEN=\"${auth_token}\"\nRTF_MULE_LICENSE='${mule_license}'\nRTF_HTTP_PROXY='${http_proxy}'\nRTF_NO_PROXY='${no_proxy}'\nRTF_MONITORING_PROXY='${monitoring_proxy}'\nRTF_SERVICE_UID='${service_uid}'\nRTF_SERVICE_GID='${service_gid}'\nRTF_AGENT_URL='${agent_url}'\nPOD_NETWORK_CIDR='${pod_network_cidr_block}'\nSERVICE_CIDR='${service_cidr_block}'\nEOF\n",
            "vars": {
              "activation_data": "YW55cG9pbnQubXVsZXNvZnQuY29tOjdmZDk0OGE5LWMwNGEtNDJiYi1iMTFhLTAyZTNkOWJmMDc0Mw==",
              "agent_url": "",
              "auth_token": "",
              "cluster_name": "runtime-fabric",
              "cluster_token": "sOH0xEcUA1x7tpbZ",
              "endpoint": "https://anypoint.mulesoft.com",
              "http_proxy": "",
              "installer_url": "",
              "monitoring_proxy": "",
              "mule_license": "2+W35iUhD9n6UzfSh144qHKlIsjMqSBw/YescXleQkGpfhLfKc4CGYnihgQo/6fKMpYrSCvCybcFkM7GspNi+aVJDAvpGyyfkpeNWx7x0ygE3eFPipCTZ/r/dTOTC8IrpGwcc6bHn1eneO9PMPQrLkqxS6GAbumpGMgoJe23ttaRz94FvcKxkq5IjGQiqnY/U7cKnnwFtK0A+7XiU5J5ROYrBIZPW6QEa31RPdummqQib3eAKn+mBubzLeTsIYcP28ne4T37A1OILlyGtDCML/Jfe/nMfncRzZx6lnuJvz5jlBqaRKSKa3Y6/aySAmOYa1KHWVbVeys8lOi5qbJS3qAzTzP40coX9XBwGo3iHx25NLqtL9b50/4vAOkAfbwSJegaKNJIrhz1dRomVEXBpForc+K9obSIt9FU8uH2HDlNfcytk/GeU2dglfcldrFCYnBYoWHvGcTAHMBxpt8XAu6UWKJs6NVTxHd98ZGDs4W0LHHqHDJUqn+sNMKKSdeTzwEzdMgGsxsYfEv6OUSgOrWMYOngpKDpchMt0ISgVpeNFo2XSCrjnA8cKx9uZ+UbD/d5zYRlU69OmPAUCNNvWNWMcptARZhbM9x+aNfixuOXmQuQUCCo6ln3X9HxTEsYTb6tLk280E9k0atMdddYjZIvhc1uuu1n3iDUgLxypMNtl8S0O4KH/iZ3Z4c6SB8VmaZxI+SHay8FIS9bttbhpLMlGQO1fxn8GH8og1D5ptYQpYhjctkCIHRADlUZ5oo9ZcO415gcn8kTYXa8gMK1Jn/YCNghMU9EFOWHHisCMwa9vdh1YFmTQLJWDklV0OoUHrze0C3csxSY2BlhVWRNceTogY2vQXa8rasxsM9Lz2dy1kGrkhxxNyT4z0YfEvIfCXFVN2csD1QeeKaFwFn6V2k+pxm5PwhOfABQJ9AqJWQ502rzNxXnFDu9yeRyykShA64ZsPrqZyD7KGe3zfj9qGawK+WJJR",
              "no_proxy": "",
              "org_id": "",
              "pod_network_cidr_block": "10.244.0.0/16",
              "region": "us-east-1",
              "service_cidr_block": "10.100.0.0/16",
              "service_gid": "",
              "service_uid": ""
            }
          }
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "worker_env",
      "provider": "provider.template",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "33095056bd27e4fb55581df825b1f677d2b6d52daae5d48ff0aff0efac090e08",
            "rendered": "#!/bin/bash\n\nmkdir -p /opt/anypoint/runtimefabric\ncat \u003e\u003e /opt/anypoint/runtimefabric/env \u003c\u003cEOF\nRTF_NODE_ROLE=worker_node\nRTF_INSTALL_ROLE=joiner\nRTF_DOCKER_DEVICE_SIZE=250G\nRTF_TOKEN=\"sOH0xEcUA1x7tpbZ\"\nRTF_INSTALLER_IP=\"192.168.61.116\"\nRTF_HTTP_PROXY=''\nRTF_NO_PROXY=''\nRTF_SERVICE_UID=''\nRTF_SERVICE_GID=''\nEOF\n",
            "template": "#!/bin/bash\n\nmkdir -p /opt/anypoint/runtimefabric\ncat \u003e\u003e /opt/anypoint/runtimefabric/env \u003c\u003cEOF\nRTF_NODE_ROLE=worker_node\nRTF_INSTALL_ROLE=joiner\nRTF_DOCKER_DEVICE_SIZE=250G\nRTF_TOKEN=\"${cluster_token}\"\nRTF_INSTALLER_IP=\"${installer_ip}\"\nRTF_HTTP_PROXY='${http_proxy}'\nRTF_NO_PROXY='${no_proxy}'\nRTF_SERVICE_UID='${service_uid}'\nRTF_SERVICE_GID='${service_gid}'\nEOF\n",
            "vars": {
              "cluster_name": "runtime-fabric",
              "cluster_token": "sOH0xEcUA1x7tpbZ",
              "http_proxy": "",
              "installer_ip": "192.168.61.116",
              "no_proxy": "",
              "service_gid": "",
              "service_uid": ""
            }
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_eip",
      "name": "controller_ip",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "mode": "managed",
      "type": "aws_eip",
      "name": "installer_ip",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "mode": "managed",
      "type": "aws_eip",
      "name": "nat",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "controller_node",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "inbound_traffic_controller",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "installer_node",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "ami": "ami-0f1ef883e90ca71c0",
            "arn": "arn:aws:ec2:ap-southeast-2:093495543323:instance/i-0c94ca06db80a19cc",
            "associate_public_ip_address": true,
            "availability_zone": "ap-southeast-2a",
            "cpu_core_count": 1,
            "cpu_threads_per_core": 2,
            "credit_specification": [],
            "disable_api_termination": false,
            "ebs_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/xvdb",
                "encrypted": false,
                "iops": 750,
                "kms_key_id": "",
                "snapshot_id": "",
                "volume_id": "vol-07363c975ff2dfd94",
                "volume_size": 250,
                "volume_type": "gp2"
              },
              {
                "delete_on_termination": true,
                "device_name": "/dev/xvdc",
                "encrypted": false,
                "iops": 3000,
                "kms_key_id": "",
                "snapshot_id": "",
                "volume_id": "vol-0b87d19eb7586b515",
                "volume_size": 60,
                "volume_type": "io1"
              }
            ],
            "ebs_optimized": true,
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": null,
            "iam_instance_profile": "",
            "id": "i-0c94ca06db80a19cc",
            "instance_initiated_shutdown_behavior": null,
            "instance_state": "running",
            "instance_type": "m5.large",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "rtf-cluster-keypair",
            "monitoring": false,
            "network_interface": [],
            "network_interface_id": null,
            "password_data": "",
            "placement_group": "",
            "primary_network_interface_id": "eni-0d99434ba285804e2",
            "private_dns": "ip-192-168-61-116.ap-southeast-2.compute.internal",
            "private_ip": "192.168.61.116",
            "public_dns": "",
            "public_ip": "52.62.86.50",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "encrypted": false,
                "iops": 270,
                "kms_key_id": "",
                "volume_id": "vol-08cbadb4aa882b994",
                "volume_size": 90,
                "volume_type": "gp2"
              }
            ],
            "security_groups": [],
            "source_dest_check": false,
            "subnet_id": "subnet-03a59993c52a79cec",
            "tags": {
              "Name": "runtime-fabric-controller",
              "ROLE": "RuntimeFabric-terraform"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": "fb5bd949a4264798b001c168f19407e556a77f3b",
            "user_data_base64": null,
            "volume_tags": {
              "Name": "runtime-fabric-volume",
              "ROLE": "RuntimeFabric-terraform"
            },
            "vpc_security_group_ids": [
              "sg-01857f5845b20dbed"
            ]
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "aws_security_group.cluster",
            "aws_subnet.public"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "worker_node",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "ami": "ami-0f1ef883e90ca71c0",
            "arn": "arn:aws:ec2:ap-southeast-2:093495543323:instance/i-0049d363074a2be47",
            "associate_public_ip_address": true,
            "availability_zone": "ap-southeast-2a",
            "cpu_core_count": 1,
            "cpu_threads_per_core": 2,
            "credit_specification": [],
            "disable_api_termination": false,
            "ebs_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/xvdb",
                "encrypted": false,
                "iops": 750,
                "kms_key_id": "",
                "snapshot_id": "",
                "volume_id": "vol-0516de0ab61a84c61",
                "volume_size": 250,
                "volume_type": "gp2"
              }
            ],
            "ebs_optimized": true,
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": null,
            "iam_instance_profile": "",
            "id": "i-0049d363074a2be47",
            "instance_initiated_shutdown_behavior": null,
            "instance_state": "running",
            "instance_type": "r5.large",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "rtf-cluster-keypair",
            "monitoring": false,
            "network_interface": [],
            "network_interface_id": null,
            "password_data": "",
            "placement_group": "",
            "primary_network_interface_id": "eni-0925b26a58ea25edf",
            "private_dns": "ip-192-168-92-178.ap-southeast-2.compute.internal",
            "private_ip": "192.168.92.178",
            "public_dns": "",
            "public_ip": "52.62.175.26",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "encrypted": false,
                "iops": 270,
                "kms_key_id": "",
                "volume_id": "vol-0497021605ee85eba",
                "volume_size": 90,
                "volume_type": "gp2"
              }
            ],
            "security_groups": [],
            "source_dest_check": false,
            "subnet_id": "subnet-03a59993c52a79cec",
            "tags": {
              "Name": "runtime-fabric-worker-0",
              "ROLE": "RuntimeFabric-terraform"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": "1686d098f852e04e172085c97940fc0cdb309dc4",
            "user_data_base64": null,
            "volume_tags": {
              "Name": "runtime-fabric-volume",
              "ROLE": "RuntimeFabric-terraform"
            },
            "vpc_security_group_ids": [
              "sg-01857f5845b20dbed"
            ]
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "aws_instance.installer_node",
            "aws_security_group.cluster",
            "aws_subnet.public",
            "random_string.cluster_token"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 1,
          "attributes": {
            "ami": "ami-0f1ef883e90ca71c0",
            "arn": "arn:aws:ec2:ap-southeast-2:093495543323:instance/i-0aa3c0a4bd22674de",
            "associate_public_ip_address": true,
            "availability_zone": "ap-southeast-2a",
            "cpu_core_count": 1,
            "cpu_threads_per_core": 2,
            "credit_specification": [],
            "disable_api_termination": false,
            "ebs_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/xvdb",
                "encrypted": false,
                "iops": 750,
                "kms_key_id": "",
                "snapshot_id": "",
                "volume_id": "vol-0487bdace9c627b8c",
                "volume_size": 250,
                "volume_type": "gp2"
              }
            ],
            "ebs_optimized": true,
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": null,
            "iam_instance_profile": "",
            "id": "i-0aa3c0a4bd22674de",
            "instance_initiated_shutdown_behavior": null,
            "instance_state": "running",
            "instance_type": "r5.large",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "rtf-cluster-keypair",
            "monitoring": false,
            "network_interface": [],
            "network_interface_id": null,
            "password_data": "",
            "placement_group": "",
            "primary_network_interface_id": "eni-0709c6cff7cf83d0b",
            "private_dns": "ip-192-168-105-170.ap-southeast-2.compute.internal",
            "private_ip": "192.168.105.170",
            "public_dns": "",
            "public_ip": "54.252.218.91",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "encrypted": false,
                "iops": 270,
                "kms_key_id": "",
                "volume_id": "vol-0603f0df25eb7a74b",
                "volume_size": 90,
                "volume_type": "gp2"
              }
            ],
            "security_groups": [],
            "source_dest_check": false,
            "subnet_id": "subnet-03a59993c52a79cec",
            "tags": {
              "Name": "runtime-fabric-worker-1",
              "ROLE": "RuntimeFabric-terraform"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": "1686d098f852e04e172085c97940fc0cdb309dc4",
            "user_data_base64": null,
            "volume_tags": {
              "Name": "runtime-fabric-volume",
              "ROLE": "RuntimeFabric-terraform"
            },
            "vpc_security_group_ids": [
              "sg-01857f5845b20dbed"
            ]
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "aws_instance.installer_node",
            "aws_security_group.cluster",
            "aws_subnet.public",
            "random_string.cluster_token"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_internet_gateway",
      "name": "gw",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "mode": "managed",
      "type": "aws_lb",
      "name": "load_balancer",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "mode": "managed",
      "type": "aws_lb_listener",
      "name": "load_balancer",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "mode": "managed",
      "type": "aws_lb_target_group",
      "name": "load_balancer",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "mode": "managed",
      "type": "aws_lb_target_group_attachment",
      "name": "controller",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "mode": "managed",
      "type": "aws_lb_target_group_attachment",
      "name": "installer",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "mode": "managed",
      "type": "aws_main_route_table_association",
      "name": "a",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "mode": "managed",
      "type": "aws_nat_gateway",
      "name": "ngw",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "mode": "managed",
      "type": "aws_route_table",
      "name": "rt",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "mode": "managed",
      "type": "aws_route_table_association",
      "name": "rta",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "mode": "managed",
      "type": "aws_security_group",
      "name": "cluster",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:ap-southeast-2:093495543323:security-group/sg-01857f5845b20dbed",
            "description": "Managed by Terraform",
            "egress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "NTP Outbound",
                "from_port": 123,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "udp",
                "security_groups": [],
                "self": false,
                "to_port": 123
              },
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "Outbound",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              },
              {
                "cidr_blocks": [],
                "description": "In-cluster Outbound",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": true,
                "to_port": 0
              }
            ],
            "id": "sg-01857f5845b20dbed",
            "ingress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "HTTPS ingress",
                "from_port": 443,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 443
              },
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "SSH access",
                "from_port": 22,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 22
              },
              {
                "cidr_blocks": [],
                "description": "Bandwidth checker utility",
                "from_port": 4242,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": true,
                "to_port": 4242
              },
              {
                "cidr_blocks": [],
                "description": "Cluster status gRPC API",
                "from_port": 7575,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": true,
                "to_port": 7575
              },
              {
                "cidr_blocks": [],
                "description": "Etcd server communications",
                "from_port": 2379,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": true,
                "to_port": 2380
              },
              {
                "cidr_blocks": [],
                "description": "Etcd server communications",
                "from_port": 4001,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": true,
                "to_port": 4001
              },
              {
                "cidr_blocks": [],
                "description": "Etcd server communications",
                "from_port": 7001,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": true,
                "to_port": 7001
              },
              {
                "cidr_blocks": [],
                "description": "Installer agent ports",
                "from_port": 61008,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": true,
                "to_port": 61010
              },
              {
                "cidr_blocks": [],
                "description": "Installer agent ports",
                "from_port": 61022,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": true,
                "to_port": 61024
              },
              {
                "cidr_blocks": [],
                "description": "Internal Docker registry",
                "from_port": 5000,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": true,
                "to_port": 5000
              },
              {
                "cidr_blocks": [],
                "description": "Internal Telekube services",
                "from_port": 3008,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": true,
                "to_port": 3012
              },
              {
                "cidr_blocks": [],
                "description": "Internal cluster DNS",
                "from_port": 53,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": true,
                "to_port": 53
              },
              {
                "cidr_blocks": [],
                "description": "Internal cluster DNS",
                "from_port": 53,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "udp",
                "security_groups": [],
                "self": true,
                "to_port": 53
              },
              {
                "cidr_blocks": [],
                "description": "Kubernetes API server",
                "from_port": 6443,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": true,
                "to_port": 6443
              },
              {
                "cidr_blocks": [],
                "description": "Kubernetes components",
                "from_port": 10248,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": true,
                "to_port": 10250
              },
              {
                "cidr_blocks": [],
                "description": "Kubernetes components",
                "from_port": 10255,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": true,
                "to_port": 10255
              },
              {
                "cidr_blocks": [],
                "description": "OpsCenter UI",
                "from_port": 32009,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": true,
                "to_port": 32009
              },
              {
                "cidr_blocks": [],
                "description": "Overlay network",
                "from_port": 8472,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "udp",
                "security_groups": [],
                "self": true,
                "to_port": 8472
              },
              {
                "cidr_blocks": [],
                "description": "RTF Agent API",
                "from_port": 30945,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": true,
                "to_port": 30945
              },
              {
                "cidr_blocks": [],
                "description": "Serf (Health check agents) peer to peer",
                "from_port": 7373,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": true,
                "to_port": 7373
              },
              {
                "cidr_blocks": [],
                "description": "Serf (Health check agents) peer to peer",
                "from_port": 7496,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": true,
                "to_port": 7496
              },
              {
                "cidr_blocks": [],
                "description": "Teleport internal SSH control panel",
                "from_port": 3022,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": true,
                "to_port": 3025
              }
            ],
            "name": "runtime-fabric",
            "name_prefix": null,
            "owner_id": "093495543323",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "runtime-fabric-cluster",
              "ROLE": "RuntimeFabric-terraform"
            },
            "timeouts": null,
            "vpc_id": "vpc-0044ab40cf21a7a9c"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "aws_vpc.vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "bandwidth",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [],
            "description": "Bandwidth checker utility",
            "from_port": 4242,
            "id": "sgrule-235706949",
            "ipv6_cidr_blocks": [],
            "prefix_list_ids": [],
            "protocol": "tcp",
            "security_group_id": "sg-01857f5845b20dbed",
            "self": true,
            "source_security_group_id": "sg-01857f5845b20dbed",
            "to_port": 4242,
            "type": "ingress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "aws_security_group.cluster",
            "aws_vpc.vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "cluster_egress_traffic",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [],
            "description": "In-cluster Outbound",
            "from_port": 0,
            "id": "sgrule-3297558448",
            "ipv6_cidr_blocks": [],
            "prefix_list_ids": [],
            "protocol": "-1",
            "security_group_id": "sg-01857f5845b20dbed",
            "self": true,
            "source_security_group_id": "sg-01857f5845b20dbed",
            "to_port": 0,
            "type": "egress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "aws_security_group.cluster",
            "aws_vpc.vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "cluster_status",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [],
            "description": "Cluster status gRPC API",
            "from_port": 7575,
            "id": "sgrule-1889704778",
            "ipv6_cidr_blocks": [],
            "prefix_list_ids": [],
            "protocol": "tcp",
            "security_group_id": "sg-01857f5845b20dbed",
            "self": true,
            "source_security_group_id": "sg-01857f5845b20dbed",
            "to_port": 7575,
            "type": "ingress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "aws_security_group.cluster",
            "aws_vpc.vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "dns_tcp",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [],
            "description": "Internal cluster DNS",
            "from_port": 53,
            "id": "sgrule-456653407",
            "ipv6_cidr_blocks": [],
            "prefix_list_ids": [],
            "protocol": "tcp",
            "security_group_id": "sg-01857f5845b20dbed",
            "self": true,
            "source_security_group_id": "sg-01857f5845b20dbed",
            "to_port": 53,
            "type": "ingress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "aws_security_group.cluster",
            "aws_vpc.vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "dns_udp",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [],
            "description": "Internal cluster DNS",
            "from_port": 53,
            "id": "sgrule-3211286960",
            "ipv6_cidr_blocks": [],
            "prefix_list_ids": [],
            "protocol": "udp",
            "security_group_id": "sg-01857f5845b20dbed",
            "self": true,
            "source_security_group_id": "sg-01857f5845b20dbed",
            "to_port": 53,
            "type": "ingress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "aws_security_group.cluster",
            "aws_vpc.vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "docker_registry",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [],
            "description": "Internal Docker registry",
            "from_port": 5000,
            "id": "sgrule-1493335633",
            "ipv6_cidr_blocks": [],
            "prefix_list_ids": [],
            "protocol": "tcp",
            "security_group_id": "sg-01857f5845b20dbed",
            "self": true,
            "source_security_group_id": "sg-01857f5845b20dbed",
            "to_port": 5000,
            "type": "ingress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "aws_security_group.cluster",
            "aws_vpc.vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "egress_traffic",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [
              "0.0.0.0/0"
            ],
            "description": "Outbound",
            "from_port": 0,
            "id": "sgrule-940836782",
            "ipv6_cidr_blocks": [],
            "prefix_list_ids": [],
            "protocol": "-1",
            "security_group_id": "sg-01857f5845b20dbed",
            "self": false,
            "source_security_group_id": null,
            "to_port": 0,
            "type": "egress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "aws_security_group.cluster",
            "aws_vpc.vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "etcd_2379",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [],
            "description": "Etcd server communications",
            "from_port": 2379,
            "id": "sgrule-4048538576",
            "ipv6_cidr_blocks": [],
            "prefix_list_ids": [],
            "protocol": "tcp",
            "security_group_id": "sg-01857f5845b20dbed",
            "self": true,
            "source_security_group_id": "sg-01857f5845b20dbed",
            "to_port": 2380,
            "type": "ingress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "aws_security_group.cluster",
            "aws_vpc.vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "etcd_4001",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [],
            "description": "Etcd server communications",
            "from_port": 4001,
            "id": "sgrule-1086589358",
            "ipv6_cidr_blocks": [],
            "prefix_list_ids": [],
            "protocol": "tcp",
            "security_group_id": "sg-01857f5845b20dbed",
            "self": true,
            "source_security_group_id": "sg-01857f5845b20dbed",
            "to_port": 4001,
            "type": "ingress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "aws_security_group.cluster",
            "aws_vpc.vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "etcd_7001",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [],
            "description": "Etcd server communications",
            "from_port": 7001,
            "id": "sgrule-3978780147",
            "ipv6_cidr_blocks": [],
            "prefix_list_ids": [],
            "protocol": "tcp",
            "security_group_id": "sg-01857f5845b20dbed",
            "self": true,
            "source_security_group_id": "sg-01857f5845b20dbed",
            "to_port": 7001,
            "type": "ingress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "aws_security_group.cluster",
            "aws_vpc.vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "http_proxy_egress_traffic",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "ingress_https",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [
              "0.0.0.0/0"
            ],
            "description": "HTTPS ingress",
            "from_port": 443,
            "id": "sgrule-1538093263",
            "ipv6_cidr_blocks": [],
            "prefix_list_ids": [],
            "protocol": "tcp",
            "security_group_id": "sg-01857f5845b20dbed",
            "self": false,
            "source_security_group_id": null,
            "to_port": 443,
            "type": "ingress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "aws_security_group.cluster",
            "aws_vpc.vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "installer_61008",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [],
            "description": "Installer agent ports",
            "from_port": 61008,
            "id": "sgrule-4003590828",
            "ipv6_cidr_blocks": [],
            "prefix_list_ids": [],
            "protocol": "tcp",
            "security_group_id": "sg-01857f5845b20dbed",
            "self": true,
            "source_security_group_id": "sg-01857f5845b20dbed",
            "to_port": 61010,
            "type": "ingress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "aws_security_group.cluster",
            "aws_vpc.vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "installer_61022",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [],
            "description": "Installer agent ports",
            "from_port": 61022,
            "id": "sgrule-2452505479",
            "ipv6_cidr_blocks": [],
            "prefix_list_ids": [],
            "protocol": "tcp",
            "security_group_id": "sg-01857f5845b20dbed",
            "self": true,
            "source_security_group_id": "sg-01857f5845b20dbed",
            "to_port": 61024,
            "type": "ingress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "aws_security_group.cluster",
            "aws_vpc.vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "internal_telekube",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [],
            "description": "Internal Telekube services",
            "from_port": 3008,
            "id": "sgrule-2242770130",
            "ipv6_cidr_blocks": [],
            "prefix_list_ids": [],
            "protocol": "tcp",
            "security_group_id": "sg-01857f5845b20dbed",
            "self": true,
            "source_security_group_id": "sg-01857f5845b20dbed",
            "to_port": 3012,
            "type": "ingress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "aws_security_group.cluster",
            "aws_vpc.vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "internal_teleport",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [],
            "description": "Teleport internal SSH control panel",
            "from_port": 3022,
            "id": "sgrule-1012423753",
            "ipv6_cidr_blocks": [],
            "prefix_list_ids": [],
            "protocol": "tcp",
            "security_group_id": "sg-01857f5845b20dbed",
            "self": true,
            "source_security_group_id": "sg-01857f5845b20dbed",
            "to_port": 3025,
            "type": "ingress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "aws_security_group.cluster",
            "aws_vpc.vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "k8s_components",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [],
            "description": "Kubernetes components",
            "from_port": 10248,
            "id": "sgrule-1624498421",
            "ipv6_cidr_blocks": [],
            "prefix_list_ids": [],
            "protocol": "tcp",
            "security_group_id": "sg-01857f5845b20dbed",
            "self": true,
            "source_security_group_id": "sg-01857f5845b20dbed",
            "to_port": 10250,
            "type": "ingress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "aws_security_group.cluster",
            "aws_vpc.vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "k8s_components_2",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [],
            "description": "Kubernetes components",
            "from_port": 10255,
            "id": "sgrule-3409392430",
            "ipv6_cidr_blocks": [],
            "prefix_list_ids": [],
            "protocol": "tcp",
            "security_group_id": "sg-01857f5845b20dbed",
            "self": true,
            "source_security_group_id": "sg-01857f5845b20dbed",
            "to_port": 10255,
            "type": "ingress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "aws_security_group.cluster",
            "aws_vpc.vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "kubernetes_api",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [],
            "description": "Kubernetes API server",
            "from_port": 6443,
            "id": "sgrule-1759545714",
            "ipv6_cidr_blocks": [],
            "prefix_list_ids": [],
            "protocol": "tcp",
            "security_group_id": "sg-01857f5845b20dbed",
            "self": true,
            "source_security_group_id": "sg-01857f5845b20dbed",
            "to_port": 6443,
            "type": "ingress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "aws_security_group.cluster",
            "aws_vpc.vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "kubernetes_api_external",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "monitoring_proxy_egress_traffic",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "ntp_egress_traffic",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [
              "0.0.0.0/0"
            ],
            "description": "NTP Outbound",
            "from_port": 123,
            "id": "sgrule-3628687354",
            "ipv6_cidr_blocks": [],
            "prefix_list_ids": [],
            "protocol": "udp",
            "security_group_id": "sg-01857f5845b20dbed",
            "self": false,
            "source_security_group_id": null,
            "to_port": 123,
            "type": "egress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "aws_security_group.cluster",
            "aws_vpc.vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "ops_center",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [],
            "description": "OpsCenter UI",
            "from_port": 32009,
            "id": "sgrule-3803399310",
            "ipv6_cidr_blocks": [],
            "prefix_list_ids": [],
            "protocol": "tcp",
            "security_group_id": "sg-01857f5845b20dbed",
            "self": true,
            "source_security_group_id": "sg-01857f5845b20dbed",
            "to_port": 32009,
            "type": "ingress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "aws_security_group.cluster",
            "aws_vpc.vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "ops_center_external",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "overlay",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [],
            "description": "Overlay network",
            "from_port": 8472,
            "id": "sgrule-3235833499",
            "ipv6_cidr_blocks": [],
            "prefix_list_ids": [],
            "protocol": "udp",
            "security_group_id": "sg-01857f5845b20dbed",
            "self": true,
            "source_security_group_id": "sg-01857f5845b20dbed",
            "to_port": 8472,
            "type": "ingress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "aws_security_group.cluster",
            "aws_vpc.vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "rtf_agent",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [],
            "description": "RTF Agent API",
            "from_port": 30945,
            "id": "sgrule-2021568549",
            "ipv6_cidr_blocks": [],
            "prefix_list_ids": [],
            "protocol": "tcp",
            "security_group_id": "sg-01857f5845b20dbed",
            "self": true,
            "source_security_group_id": "sg-01857f5845b20dbed",
            "to_port": 30945,
            "type": "ingress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "aws_security_group.cluster",
            "aws_vpc.vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "serf_7373",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [],
            "description": "Serf (Health check agents) peer to peer",
            "from_port": 7373,
            "id": "sgrule-1984509222",
            "ipv6_cidr_blocks": [],
            "prefix_list_ids": [],
            "protocol": "tcp",
            "security_group_id": "sg-01857f5845b20dbed",
            "self": true,
            "source_security_group_id": "sg-01857f5845b20dbed",
            "to_port": 7373,
            "type": "ingress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "aws_security_group.cluster",
            "aws_vpc.vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "serf_7496",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [],
            "description": "Serf (Health check agents) peer to peer",
            "from_port": 7496,
            "id": "sgrule-739814880",
            "ipv6_cidr_blocks": [],
            "prefix_list_ids": [],
            "protocol": "tcp",
            "security_group_id": "sg-01857f5845b20dbed",
            "self": true,
            "source_security_group_id": "sg-01857f5845b20dbed",
            "to_port": 7496,
            "type": "ingress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "aws_security_group.cluster",
            "aws_vpc.vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "ssh",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [
              "0.0.0.0/0"
            ],
            "description": "SSH access",
            "from_port": 22,
            "id": "sgrule-1044341108",
            "ipv6_cidr_blocks": [],
            "prefix_list_ids": [],
            "protocol": "tcp",
            "security_group_id": "sg-01857f5845b20dbed",
            "self": false,
            "source_security_group_id": null,
            "to_port": 22,
            "type": "ingress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "aws_security_group.cluster",
            "aws_vpc.vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_subnet",
      "name": "public",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "mode": "managed",
      "type": "aws_vpc",
      "name": "vpc",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "mode": "managed",
      "type": "random_string",
      "name": "cluster_token",
      "provider": "provider.random",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "sOH0xEcUA1x7tpbZ",
            "keepers": null,
            "length": 16,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "override_special": null,
            "result": "sOH0xEcUA1x7tpbZ",
            "special": false,
            "upper": true
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    }
  ]
}
